<?xml version="1.0" encoding="UTF-8"?>
<bundle id="master-2025-05-26T02-36-56-126Z" created="2025-05-26T02:36:56.126Z" fileCount="23">
  
  <metadata>
    <projectName>project</projectName>
    <totalFiles>23</totalFiles>
    <bundleType>master</bundleType>
    <ignorePatterns>
      <pattern>node_modules</pattern>
      <pattern>.git</pattern>
      <pattern>dist</pattern>
      <pattern>build</pattern>
      <pattern>coverage</pattern>
      <pattern>.next</pattern>
      <pattern>.cache</pattern>
      <pattern>.netlify</pattern>
      <pattern>package-lock.json</pattern>
      <pattern>yarn.lock</pattern>
      <pattern>.DS_Store</pattern>
      <pattern>Thumbs.db</pattern>
      <pattern>*.mp3</pattern>
      <pattern>*.mp4</pattern>
      <pattern>*.wav</pattern>
      <pattern>*.ogg</pattern>
      <pattern>*.m4a</pattern>
      <pattern>*.flac</pattern>
      <pattern>*.jpg</pattern>
      <pattern>*.jpeg</pattern>
      <pattern>*.png</pattern>
      <pattern>*.gif</pattern>
      <pattern>*.webp</pattern>
      <pattern>*.svg</pattern>
      <pattern>*.ico</pattern>
      <pattern>*.pxd</pattern>
      <pattern>*.pdf</pattern>
      <pattern>*.doc</pattern>
      <pattern>*.docx</pattern>
      <pattern>*.zip</pattern>
      <pattern>*.tar</pattern>
      <pattern>*.gz</pattern>
      <pattern>*.rar</pattern>
      <pattern>example-project</pattern>
      <pattern>issues</pattern>
    </ignorePatterns>
  </metadata>

  <directoryTree>
  <directory name="src" path="src">
    <directory name="components" path="src/components">
      <directory name="ui" path="src/components/ui">
        <file name="badge.tsx" path="src/components/ui/badge.tsx" size="0" lastModified="2025-05-26T02:34:06.956Z">
          <tags></tags>
        </file>
        <file name="button.tsx" path="src/components/ui/button.tsx" size="0" lastModified="2025-05-26T02:31:42.872Z">
          <tags></tags>
        </file>
        <file name="card.tsx" path="src/components/ui/card.tsx" size="0" lastModified="2025-05-26T02:31:50.294Z">
          <tags></tags>
        </file>
        <file name="input.tsx" path="src/components/ui/input.tsx" size="0" lastModified="2025-05-26T02:31:46.613Z">
          <tags></tags>
        </file>
        <file name="progress.tsx" path="src/components/ui/progress.tsx" size="0" lastModified="2025-05-26T02:35:20.958Z">
          <tags></tags>
        </file>
      </directory>
    </directory>
    <directory name="lib" path="src/lib">
      <file name="analyzer.ts" path="src/lib/analyzer.ts" size="0" lastModified="2025-05-26T02:33:27.187Z">
        <tags></tags>
      </file>
      <file name="utils.ts" path="src/lib/utils.ts" size="0" lastModified="2025-05-26T02:31:18.948Z">
        <tags></tags>
      </file>
    </directory>
    <file name="App.css" path="src/App.css" size="0" lastModified="2025-05-26T02:28:07.075Z">
      <tags></tags>
    </file>
    <file name="App.tsx" path="src/App.tsx" size="0" lastModified="2025-05-26T02:32:16.473Z">
      <tags></tags>
    </file>
    <file name="index.css" path="src/index.css" size="0" lastModified="2025-05-26T02:31:11.428Z">
      <tags></tags>
    </file>
    <file name="main.tsx" path="src/main.tsx" size="0" lastModified="2025-05-26T02:28:07.078Z">
      <tags></tags>
    </file>
    <file name="vite-env.d.ts" path="src/vite-env.d.ts" size="0" lastModified="2025-05-26T02:28:07.078Z">
      <tags></tags>
    </file>
  </directory>
  <file name=".env" path=".env" size="0" lastModified="2025-05-26T02:35:11.757Z">
    <tags></tags>
  </file>
  <file name=".gitignore" path=".gitignore" size="0" lastModified="2025-05-26T02:28:07.073Z">
    <tags></tags>
  </file>
  <file name="components.json" path="components.json" size="0" lastModified="2025-05-26T02:31:10.888Z">
    <tags></tags>
  </file>
  <file name="eslint.config.js" path="eslint.config.js" size="0" lastModified="2025-05-26T02:28:07.073Z">
    <tags></tags>
  </file>
  <file name="index.html" path="index.html" size="0" lastModified="2025-05-26T02:28:07.074Z">
    <tags></tags>
  </file>
  <file name="package.json" path="package.json" size="0" lastModified="2025-05-26T02:35:20.204Z">
    <tags></tags>
  </file>
  <file name="README.md" path="README.md" size="0" lastModified="2025-05-26T02:36:50.222Z">
    <tags></tags>
  </file>
  <file name="tsconfig.app.json" path="tsconfig.app.json" size="0" lastModified="2025-05-26T02:29:35.638Z">
    <tags></tags>
  </file>
  <file name="tsconfig.json" path="tsconfig.json" size="0" lastModified="2025-05-26T02:29:04.749Z">
    <tags></tags>
  </file>
  <file name="tsconfig.node.json" path="tsconfig.node.json" size="0" lastModified="2025-05-26T02:28:07.080Z">
    <tags></tags>
  </file>
  <file name="vite.config.ts" path="vite.config.ts" size="0" lastModified="2025-05-26T02:30:07.907Z">
    <tags></tags>
  </file>
</directoryTree>

  <asciiTree>
project/
├── src/
│   ├── components/
│   │   └── ui/
│   │       ├── badge.tsx
│   │       ├── button.tsx
│   │       ├── card.tsx
│   │       ├── input.tsx
│   │       └── progress.tsx
│   ├── lib/
│   │   ├── analyzer.ts
│   │   └── utils.ts
│   ├── App.css
│   ├── App.tsx
│   ├── index.css
│   ├── main.tsx
│   └── vite-env.d.ts
├── .env
├── .gitignore
├── components.json
├── eslint.config.js
├── index.html
├── package.json
├── README.md
├── tsconfig.app.json
├── tsconfig.json
├── tsconfig.node.json
└── vite.config.ts

23 files, 4 directories
  </asciiTree>

  <documents>
    
    <document>
      <source>src/components/ui/button.tsx</source>
      <tags></tags>
      <metadata>
        <size>2123</size>
        <lastModified>2025-05-26T02:31:42.872Z</lastModified>
        <extension>tsx</extension>
        <directory>src/components/ui</directory>
      </metadata>
      <content>import * as React from &quot;react&quot;
import { Slot } from &quot;@radix-ui/react-slot&quot;
import { cva, type VariantProps } from &quot;class-variance-authority&quot;

import { cn } from &quot;@/lib/utils&quot;

const buttonVariants = cva(
  &quot;inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&amp;_svg]:pointer-events-none [&amp;_svg:not([class*=&#39;size-&#39;])]:size-4 shrink-0 [&amp;_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive&quot;,
  {
    variants: {
      variant: {
        default:
          &quot;bg-primary text-primary-foreground shadow-xs hover:bg-primary/90&quot;,
        destructive:
          &quot;bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60&quot;,
        outline:
          &quot;border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50&quot;,
        secondary:
          &quot;bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80&quot;,
        ghost:
          &quot;hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50&quot;,
        link: &quot;text-primary underline-offset-4 hover:underline&quot;,
      },
      size: {
        default: &quot;h-9 px-4 py-2 has-[&gt;svg]:px-3&quot;,
        sm: &quot;h-8 rounded-md gap-1.5 px-3 has-[&gt;svg]:px-2.5&quot;,
        lg: &quot;h-10 rounded-md px-6 has-[&gt;svg]:px-4&quot;,
        icon: &quot;size-9&quot;,
      },
    },
    defaultVariants: {
      variant: &quot;default&quot;,
      size: &quot;default&quot;,
    },
  }
)

function Button({
  className,
  variant,
  size,
  asChild = false,
  ...props
}: React.ComponentProps&lt;&quot;button&quot;&gt; &amp;
  VariantProps&lt;typeof buttonVariants&gt; &amp; {
    asChild?: boolean
  }) {
  const Comp = asChild ? Slot : &quot;button&quot;

  return (
    &lt;Comp
      data-slot=&quot;button&quot;
      className={cn(buttonVariants({ variant, size, className }))}
      {...props}
    /&gt;
  )
}

export { Button, buttonVariants }
</content>
    </document>

    <document>
      <source>src/components/ui/progress.tsx</source>
      <tags></tags>
      <metadata>
        <size>726</size>
        <lastModified>2025-05-26T02:35:20.958Z</lastModified>
        <extension>tsx</extension>
        <directory>src/components/ui</directory>
      </metadata>
      <content>import * as React from &quot;react&quot;
import * as ProgressPrimitive from &quot;@radix-ui/react-progress&quot;

import { cn } from &quot;@/lib/utils&quot;

function Progress({
  className,
  value,
  ...props
}: React.ComponentProps&lt;typeof ProgressPrimitive.Root&gt;) {
  return (
    &lt;ProgressPrimitive.Root
      data-slot=&quot;progress&quot;
      className={cn(
        &quot;bg-primary/20 relative h-2 w-full overflow-hidden rounded-full&quot;,
        className
      )}
      {...props}
    &gt;
      &lt;ProgressPrimitive.Indicator
        data-slot=&quot;progress-indicator&quot;
        className=&quot;bg-primary h-full w-full flex-1 transition-all&quot;
        style={{ transform: `translateX(-${100 - (value || 0)}%)` }}
      /&gt;
    &lt;/ProgressPrimitive.Root&gt;
  )
}

export { Progress }
</content>
    </document>

    <document>
      <source>src/components/ui/card.tsx</source>
      <tags></tags>
      <metadata>
        <size>1989</size>
        <lastModified>2025-05-26T02:31:50.294Z</lastModified>
        <extension>tsx</extension>
        <directory>src/components/ui</directory>
      </metadata>
      <content>import * as React from &quot;react&quot;

import { cn } from &quot;@/lib/utils&quot;

function Card({ className, ...props }: React.ComponentProps&lt;&quot;div&quot;&gt;) {
  return (
    &lt;div
      data-slot=&quot;card&quot;
      className={cn(
        &quot;bg-card text-card-foreground flex flex-col gap-6 rounded-xl border py-6 shadow-sm&quot;,
        className
      )}
      {...props}
    /&gt;
  )
}

function CardHeader({ className, ...props }: React.ComponentProps&lt;&quot;div&quot;&gt;) {
  return (
    &lt;div
      data-slot=&quot;card-header&quot;
      className={cn(
        &quot;@container/card-header grid auto-rows-min grid-rows-[auto_auto] items-start gap-1.5 px-6 has-data-[slot=card-action]:grid-cols-[1fr_auto] [.border-b]:pb-6&quot;,
        className
      )}
      {...props}
    /&gt;
  )
}

function CardTitle({ className, ...props }: React.ComponentProps&lt;&quot;div&quot;&gt;) {
  return (
    &lt;div
      data-slot=&quot;card-title&quot;
      className={cn(&quot;leading-none font-semibold&quot;, className)}
      {...props}
    /&gt;
  )
}

function CardDescription({ className, ...props }: React.ComponentProps&lt;&quot;div&quot;&gt;) {
  return (
    &lt;div
      data-slot=&quot;card-description&quot;
      className={cn(&quot;text-muted-foreground text-sm&quot;, className)}
      {...props}
    /&gt;
  )
}

function CardAction({ className, ...props }: React.ComponentProps&lt;&quot;div&quot;&gt;) {
  return (
    &lt;div
      data-slot=&quot;card-action&quot;
      className={cn(
        &quot;col-start-2 row-span-2 row-start-1 self-start justify-self-end&quot;,
        className
      )}
      {...props}
    /&gt;
  )
}

function CardContent({ className, ...props }: React.ComponentProps&lt;&quot;div&quot;&gt;) {
  return (
    &lt;div
      data-slot=&quot;card-content&quot;
      className={cn(&quot;px-6&quot;, className)}
      {...props}
    /&gt;
  )
}

function CardFooter({ className, ...props }: React.ComponentProps&lt;&quot;div&quot;&gt;) {
  return (
    &lt;div
      data-slot=&quot;card-footer&quot;
      className={cn(&quot;flex items-center px-6 [.border-t]:pt-6&quot;, className)}
      {...props}
    /&gt;
  )
}

export {
  Card,
  CardHeader,
  CardFooter,
  CardTitle,
  CardAction,
  CardDescription,
  CardContent,
}
</content>
    </document>

    <document>
      <source>src/components/ui/badge.tsx</source>
      <tags></tags>
      <metadata>
        <size>1631</size>
        <lastModified>2025-05-26T02:34:06.956Z</lastModified>
        <extension>tsx</extension>
        <directory>src/components/ui</directory>
      </metadata>
      <content>import * as React from &quot;react&quot;
import { Slot } from &quot;@radix-ui/react-slot&quot;
import { cva, type VariantProps } from &quot;class-variance-authority&quot;

import { cn } from &quot;@/lib/utils&quot;

const badgeVariants = cva(
  &quot;inline-flex items-center justify-center rounded-md border px-2 py-0.5 text-xs font-medium w-fit whitespace-nowrap shrink-0 [&amp;&gt;svg]:size-3 gap-1 [&amp;&gt;svg]:pointer-events-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive transition-[color,box-shadow] overflow-hidden&quot;,
  {
    variants: {
      variant: {
        default:
          &quot;border-transparent bg-primary text-primary-foreground [a&amp;]:hover:bg-primary/90&quot;,
        secondary:
          &quot;border-transparent bg-secondary text-secondary-foreground [a&amp;]:hover:bg-secondary/90&quot;,
        destructive:
          &quot;border-transparent bg-destructive text-white [a&amp;]:hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60&quot;,
        outline:
          &quot;text-foreground [a&amp;]:hover:bg-accent [a&amp;]:hover:text-accent-foreground&quot;,
      },
    },
    defaultVariants: {
      variant: &quot;default&quot;,
    },
  }
)

function Badge({
  className,
  variant,
  asChild = false,
  ...props
}: React.ComponentProps&lt;&quot;span&quot;&gt; &amp;
  VariantProps&lt;typeof badgeVariants&gt; &amp; { asChild?: boolean }) {
  const Comp = asChild ? Slot : &quot;span&quot;

  return (
    &lt;Comp
      data-slot=&quot;badge&quot;
      className={cn(badgeVariants({ variant }), className)}
      {...props}
    /&gt;
  )
}

export { Badge, badgeVariants }
</content>
    </document>

    <document>
      <source>src/components/ui/input.tsx</source>
      <tags></tags>
      <metadata>
        <size>967</size>
        <lastModified>2025-05-26T02:31:46.613Z</lastModified>
        <extension>tsx</extension>
        <directory>src/components/ui</directory>
      </metadata>
      <content>import * as React from &quot;react&quot;

import { cn } from &quot;@/lib/utils&quot;

function Input({ className, type, ...props }: React.ComponentProps&lt;&quot;input&quot;&gt;) {
  return (
    &lt;input
      type={type}
      data-slot=&quot;input&quot;
      className={cn(
        &quot;file:text-foreground placeholder:text-muted-foreground selection:bg-primary selection:text-primary-foreground dark:bg-input/30 border-input flex h-9 w-full min-w-0 rounded-md border bg-transparent px-3 py-1 text-base shadow-xs transition-[color,box-shadow] outline-none file:inline-flex file:h-7 file:border-0 file:bg-transparent file:text-sm file:font-medium disabled:pointer-events-none disabled:cursor-not-allowed disabled:opacity-50 md:text-sm&quot;,
        &quot;focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px]&quot;,
        &quot;aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive&quot;,
        className
      )}
      {...props}
    /&gt;
  )
}

export { Input }
</content>
    </document>

    <document>
      <source>src/lib/utils.ts</source>
      <tags></tags>
      <metadata>
        <size>166</size>
        <lastModified>2025-05-26T02:31:18.948Z</lastModified>
        <extension>ts</extension>
        <directory>src/lib</directory>
      </metadata>
      <content>import { clsx, type ClassValue } from &quot;clsx&quot;
import { twMerge } from &quot;tailwind-merge&quot;

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}
</content>
    </document>

    <document>
      <source>src/lib/analyzer.ts</source>
      <tags></tags>
      <metadata>
        <size>2442</size>
        <lastModified>2025-05-26T02:33:27.187Z</lastModified>
        <extension>ts</extension>
        <directory>src/lib</directory>
      </metadata>
      <content>// lib/analyzer.ts
const HELIUS_API_KEY = &#39;your-helius-api-key-here&#39; // Replace with your key
const HELIUS_URL = `https://mainnet.helius-rpc.com/?api-key=${HELIUS_API_KEY}`

export interface AnalysisResult {
  score: number
  metrics: {
    timingCluster: number
    walletSimilarity: number
    sizePatterns: number
    distribution: number
  }
  details: {
    totalTransactions: number
    uniqueWallets: number
    analysisPeriod: string
    suspiciousWallets: number
  }
}

export async function analyzeToken(
  contractAddress: string,
  period: &#39;launch&#39; | &#39;recent&#39; | &#39;custom&#39;
): Promise&lt;AnalysisResult&gt; {
  // Mock implementation for now - replace with real Helius calls
  console.log(`Analyzing ${contractAddress} for ${period} period`)

  // Simulate API delay
  await new Promise((resolve) =&gt; setTimeout(resolve, 2000))

  // Mock data - replace with real analysis
  const mockResult: AnalysisResult = {
    score: Math.floor(Math.random() * 100),
    metrics: {
      timingCluster: Math.floor(Math.random() * 100),
      walletSimilarity: Math.floor(Math.random() * 100),
      sizePatterns: Math.floor(Math.random() * 100),
      distribution: Math.floor(Math.random() * 100),
    },
    details: {
      totalTransactions: Math.floor(Math.random() * 1000) + 100,
      uniqueWallets: Math.floor(Math.random() * 200) + 50,
      analysisPeriod: period === &#39;launch&#39; ? &#39;24h&#39; : &#39;7d&#39;,
      suspiciousWallets: Math.floor(Math.random() * 20),
    },
  }

  return mockResult
}

// Real implementation starter - uncomment and modify as needed
/*
async function getTokenTransactions(contractAddress: string, period: string) {
  const response = await fetch(HELIUS_URL, {
    method: &#39;POST&#39;,
    headers: {
      &#39;Content-Type&#39;: &#39;application/json&#39;,
    },
    body: JSON.stringify({
      jsonrpc: &#39;2.0&#39;,
      id: &#39;analysis&#39;,
      method: &#39;getSignaturesForAddress&#39;,
      params: [
        contractAddress,
        {
          limit: 1000, // Start with sampling
          commitment: &#39;confirmed&#39;
        }
      ]
    })
  });
  
  const data = await response.json();
  return data.result;
}

async function analyzeBundlingPatterns(transactions: any[]) {
  // Implement your analysis logic here
  // - Time clustering analysis
  // - Wallet pattern detection  
  // - Transaction size analysis
  // - Distribution metrics
  
  return {
    timingCluster: 0,
    walletSimilarity: 0,
    sizePatterns: 0,
    distribution: 0
  };
}
*/
</content>
    </document>

    <document>
      <source>src/index.css</source>
      <tags></tags>
      <metadata>
        <size>4090</size>
        <lastModified>2025-05-26T02:31:11.428Z</lastModified>
        <extension>css</extension>
        <directory>src</directory>
      </metadata>
      <content>@import &quot;tailwindcss&quot;;
@import &quot;tw-animate-css&quot;;

@custom-variant dark (&amp;:is(.dark *));

@theme inline {
  --radius-sm: calc(var(--radius) - 4px);
  --radius-md: calc(var(--radius) - 2px);
  --radius-lg: var(--radius);
  --radius-xl: calc(var(--radius) + 4px);
  --color-background: var(--background);
  --color-foreground: var(--foreground);
  --color-card: var(--card);
  --color-card-foreground: var(--card-foreground);
  --color-popover: var(--popover);
  --color-popover-foreground: var(--popover-foreground);
  --color-primary: var(--primary);
  --color-primary-foreground: var(--primary-foreground);
  --color-secondary: var(--secondary);
  --color-secondary-foreground: var(--secondary-foreground);
  --color-muted: var(--muted);
  --color-muted-foreground: var(--muted-foreground);
  --color-accent: var(--accent);
  --color-accent-foreground: var(--accent-foreground);
  --color-destructive: var(--destructive);
  --color-border: var(--border);
  --color-input: var(--input);
  --color-ring: var(--ring);
  --color-chart-1: var(--chart-1);
  --color-chart-2: var(--chart-2);
  --color-chart-3: var(--chart-3);
  --color-chart-4: var(--chart-4);
  --color-chart-5: var(--chart-5);
  --color-sidebar: var(--sidebar);
  --color-sidebar-foreground: var(--sidebar-foreground);
  --color-sidebar-primary: var(--sidebar-primary);
  --color-sidebar-primary-foreground: var(--sidebar-primary-foreground);
  --color-sidebar-accent: var(--sidebar-accent);
  --color-sidebar-accent-foreground: var(--sidebar-accent-foreground);
  --color-sidebar-border: var(--sidebar-border);
  --color-sidebar-ring: var(--sidebar-ring);
}

:root {
  --radius: 0.625rem;
  --background: oklch(1 0 0);
  --foreground: oklch(0.145 0 0);
  --card: oklch(1 0 0);
  --card-foreground: oklch(0.145 0 0);
  --popover: oklch(1 0 0);
  --popover-foreground: oklch(0.145 0 0);
  --primary: oklch(0.205 0 0);
  --primary-foreground: oklch(0.985 0 0);
  --secondary: oklch(0.97 0 0);
  --secondary-foreground: oklch(0.205 0 0);
  --muted: oklch(0.97 0 0);
  --muted-foreground: oklch(0.556 0 0);
  --accent: oklch(0.97 0 0);
  --accent-foreground: oklch(0.205 0 0);
  --destructive: oklch(0.577 0.245 27.325);
  --border: oklch(0.922 0 0);
  --input: oklch(0.922 0 0);
  --ring: oklch(0.708 0 0);
  --chart-1: oklch(0.646 0.222 41.116);
  --chart-2: oklch(0.6 0.118 184.704);
  --chart-3: oklch(0.398 0.07 227.392);
  --chart-4: oklch(0.828 0.189 84.429);
  --chart-5: oklch(0.769 0.188 70.08);
  --sidebar: oklch(0.985 0 0);
  --sidebar-foreground: oklch(0.145 0 0);
  --sidebar-primary: oklch(0.205 0 0);
  --sidebar-primary-foreground: oklch(0.985 0 0);
  --sidebar-accent: oklch(0.97 0 0);
  --sidebar-accent-foreground: oklch(0.205 0 0);
  --sidebar-border: oklch(0.922 0 0);
  --sidebar-ring: oklch(0.708 0 0);
}

.dark {
  --background: oklch(0.145 0 0);
  --foreground: oklch(0.985 0 0);
  --card: oklch(0.205 0 0);
  --card-foreground: oklch(0.985 0 0);
  --popover: oklch(0.205 0 0);
  --popover-foreground: oklch(0.985 0 0);
  --primary: oklch(0.922 0 0);
  --primary-foreground: oklch(0.205 0 0);
  --secondary: oklch(0.269 0 0);
  --secondary-foreground: oklch(0.985 0 0);
  --muted: oklch(0.269 0 0);
  --muted-foreground: oklch(0.708 0 0);
  --accent: oklch(0.269 0 0);
  --accent-foreground: oklch(0.985 0 0);
  --destructive: oklch(0.704 0.191 22.216);
  --border: oklch(1 0 0 / 10%);
  --input: oklch(1 0 0 / 15%);
  --ring: oklch(0.556 0 0);
  --chart-1: oklch(0.488 0.243 264.376);
  --chart-2: oklch(0.696 0.17 162.48);
  --chart-3: oklch(0.769 0.188 70.08);
  --chart-4: oklch(0.627 0.265 303.9);
  --chart-5: oklch(0.645 0.246 16.439);
  --sidebar: oklch(0.205 0 0);
  --sidebar-foreground: oklch(0.985 0 0);
  --sidebar-primary: oklch(0.488 0.243 264.376);
  --sidebar-primary-foreground: oklch(0.985 0 0);
  --sidebar-accent: oklch(0.269 0 0);
  --sidebar-accent-foreground: oklch(0.985 0 0);
  --sidebar-border: oklch(1 0 0 / 10%);
  --sidebar-ring: oklch(0.556 0 0);
}

@layer base {
  * {
    @apply border-border outline-ring/50;
  }
  body {
    @apply bg-background text-foreground;
  }
}
</content>
    </document>

    <document>
      <source>src/App.tsx</source>
      <tags></tags>
      <metadata>
        <size>7210</size>
        <lastModified>2025-05-26T02:32:16.473Z</lastModified>
        <extension>tsx</extension>
        <directory>src</directory>
      </metadata>
      <content>import React, { useState } from &#39;react&#39;;
import { Button } from &quot;@/components/ui/button&quot;;
import { Input } from &quot;@/components/ui/input&quot;;
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from &quot;@/components/ui/card&quot;;
import { Badge } from &quot;@/components/ui/badge&quot;;
import { Progress } from &quot;@/components/ui/progress&quot;;
import { analyzeToken } from &#39;./lib/analyzer&#39;;

interface AnalysisResult {
  score: number;
  metrics: {
    timingCluster: number;
    walletSimilarity: number;
    sizePatterns: number;
    distribution: number;
  };
  details: {
    totalTransactions: number;
    uniqueWallets: number;
    analysisPeriod: string;
    suspiciousWallets: number;
  };
}

function App() {
  const [contractAddress, setContractAddress] = useState(&#39;&#39;);
  const [period, setPeriod] = useState&lt;&#39;launch&#39; | &#39;recent&#39; | &#39;custom&#39;&gt;(&#39;launch&#39;);
  const [loading, setLoading] = useState(false);
  const [result, setResult] = useState&lt;AnalysisResult | null&gt;(null);
  const [error, setError] = useState(&#39;&#39;);

  const handleAnalyze = async () =&gt; {
    if (!contractAddress.trim()) {
      setError(&#39;Please enter a contract address&#39;);
      return;
    }

    setLoading(true);
    setError(&#39;&#39;);
    setResult(null);

    try {
      const analysis = await analyzeToken(contractAddress, period);
      setResult(analysis);
    } catch (err) {
      setError(err instanceof Error ? err.message : &#39;Analysis failed&#39;);
    } finally {
      setLoading(false);
    }
  };

  const getScoreColor = (score: number) =&gt; {
    if (score &gt;= 80) return &#39;bg-red-500&#39;;
    if (score &gt;= 60) return &#39;bg-orange-500&#39;;
    if (score &gt;= 40) return &#39;bg-yellow-500&#39;;
    return &#39;bg-green-500&#39;;
  };

  const getScoreLabel = (score: number) =&gt; {
    if (score &gt;= 80) return &#39;High Risk&#39;;
    if (score &gt;= 60) return &#39;Medium Risk&#39;;
    if (score &gt;= 40) return &#39;Low Risk&#39;;
    return &#39;Organic&#39;;
  };

  return (
    &lt;div className=&quot;min-h-screen bg-background p-8&quot;&gt;
      &lt;div className=&quot;mx-auto max-w-4xl space-y-8&quot;&gt;
        &lt;div className=&quot;text-center&quot;&gt;
          &lt;h1 className=&quot;text-4xl font-bold&quot;&gt;Solana Bundler Detective&lt;/h1&gt;
          &lt;p className=&quot;text-muted-foreground mt-2&quot;&gt;
            Analyze token transactions for coordinated buying patterns
          &lt;/p&gt;
        &lt;/div&gt;

        &lt;Card&gt;
          &lt;CardHeader&gt;
            &lt;CardTitle&gt;Token Analysis&lt;/CardTitle&gt;
            &lt;CardDescription&gt;
              Enter a Solana token contract address to analyze for bundled transactions
            &lt;/CardDescription&gt;
          &lt;/CardHeader&gt;
          &lt;CardContent className=&quot;space-y-4&quot;&gt;
            &lt;div className=&quot;flex gap-4&quot;&gt;
              &lt;Input
                placeholder=&quot;Token contract address...&quot;
                value={contractAddress}
                onChange={(e) =&gt; setContractAddress(e.target.value)}
                className=&quot;flex-1&quot;
              /&gt;
              &lt;select
                value={period}
                onChange={(e) =&gt; setPeriod(e.target.value as any)}
                className=&quot;px-3 py-2 border rounded-md&quot;
              &gt;
                &lt;option value=&quot;launch&quot;&gt;Launch Period&lt;/option&gt;
                &lt;option value=&quot;recent&quot;&gt;Recent (7 days)&lt;/option&gt;
              &lt;/select&gt;
            &lt;/div&gt;

            &lt;Button
              onClick={handleAnalyze}
              disabled={loading}
              className=&quot;w-full&quot;
            &gt;
              {loading ? &#39;Analyzing...&#39; : &#39;Analyze Token&#39;}
            &lt;/Button&gt;

            {error &amp;&amp; (
              &lt;div className=&quot;text-red-500 text-sm&quot;&gt;{error}&lt;/div&gt;
            )}
          &lt;/CardContent&gt;
        &lt;/Card&gt;

        {loading &amp;&amp; (
          &lt;Card&gt;
            &lt;CardContent className=&quot;pt-6&quot;&gt;
              &lt;div className=&quot;space-y-2&quot;&gt;
                &lt;div className=&quot;flex justify-between text-sm&quot;&gt;
                  &lt;span&gt;Analyzing transactions...&lt;/span&gt;
                  &lt;span&gt;Processing&lt;/span&gt;
                &lt;/div&gt;
                &lt;Progress value={65} className=&quot;w-full&quot; /&gt;
              &lt;/div&gt;
            &lt;/CardContent&gt;
          &lt;/Card&gt;
        )}

        {result &amp;&amp; (
          &lt;div className=&quot;space-y-6&quot;&gt;
            &lt;Card&gt;
              &lt;CardHeader&gt;
                &lt;CardTitle className=&quot;flex items-center justify-between&quot;&gt;
                  &lt;span&gt;Analysis Results&lt;/span&gt;
                  &lt;Badge variant=&quot;secondary&quot; className={getScoreColor(result.score)}&gt;
                    {getScoreLabel(result.score)} ({result.score}/100)
                  &lt;/Badge&gt;
                &lt;/CardTitle&gt;
              &lt;/CardHeader&gt;
              &lt;CardContent&gt;
                &lt;div className=&quot;space-y-4&quot;&gt;
                  &lt;div&gt;
                    &lt;div className=&quot;flex justify-between text-sm mb-2&quot;&gt;
                      &lt;span&gt;Bundling Risk Score&lt;/span&gt;
                      &lt;span&gt;{result.score}/100&lt;/span&gt;
                    &lt;/div&gt;
                    &lt;Progress value={result.score} className=&quot;w-full&quot; /&gt;
                  &lt;/div&gt;

                  &lt;div className=&quot;grid grid-cols-2 md:grid-cols-4 gap-4 pt-4&quot;&gt;
                    &lt;div className=&quot;text-center&quot;&gt;
                      &lt;div className=&quot;text-2xl font-bold&quot;&gt;{result.details.totalTransactions}&lt;/div&gt;
                      &lt;div className=&quot;text-sm text-muted-foreground&quot;&gt;Total Transactions&lt;/div&gt;
                    &lt;/div&gt;
                    &lt;div className=&quot;text-center&quot;&gt;
                      &lt;div className=&quot;text-2xl font-bold&quot;&gt;{result.details.uniqueWallets}&lt;/div&gt;
                      &lt;div className=&quot;text-sm text-muted-foreground&quot;&gt;Unique Wallets&lt;/div&gt;
                    &lt;/div&gt;
                    &lt;div className=&quot;text-center&quot;&gt;
                      &lt;div className=&quot;text-2xl font-bold&quot;&gt;{result.details.suspiciousWallets}&lt;/div&gt;
                      &lt;div className=&quot;text-sm text-muted-foreground&quot;&gt;Suspicious Wallets&lt;/div&gt;
                    &lt;/div&gt;
                    &lt;div className=&quot;text-center&quot;&gt;
                      &lt;div className=&quot;text-2xl font-bold&quot;&gt;{result.details.analysisPeriod}&lt;/div&gt;
                      &lt;div className=&quot;text-sm text-muted-foreground&quot;&gt;Period Analyzed&lt;/div&gt;
                    &lt;/div&gt;
                  &lt;/div&gt;
                &lt;/div&gt;
              &lt;/CardContent&gt;
            &lt;/Card&gt;

            &lt;Card&gt;
              &lt;CardHeader&gt;
                &lt;CardTitle&gt;Detailed Metrics&lt;/CardTitle&gt;
              &lt;/CardHeader&gt;
              &lt;CardContent&gt;
                &lt;div className=&quot;space-y-4&quot;&gt;
                  {Object.entries({
                    &#39;Timing Cluster Score&#39;: result.metrics.timingCluster,
                    &#39;Wallet Similarity&#39;: result.metrics.walletSimilarity,
                    &#39;Size Patterns&#39;: result.metrics.sizePatterns,
                    &#39;Distribution Score&#39;: result.metrics.distribution
                  }).map(([label, value]) =&gt; (
                    &lt;div key={label}&gt;
                      &lt;div className=&quot;flex justify-between text-sm mb-2&quot;&gt;
                        &lt;span&gt;{label}&lt;/span&gt;
                        &lt;span&gt;{value}/100&lt;/span&gt;
                      &lt;/div&gt;
                      &lt;Progress value={value} className=&quot;w-full&quot; /&gt;
                    &lt;/div&gt;
                  ))}
                &lt;/div&gt;
              &lt;/CardContent&gt;
            &lt;/Card&gt;
          &lt;/div&gt;
        )}
      &lt;/div&gt;
    &lt;/div&gt;
  );
}

export default App;
</content>
    </document>

    <document>
      <source>src/App.css</source>
      <tags></tags>
      <metadata>
        <size>606</size>
        <lastModified>2025-05-26T02:28:07.075Z</lastModified>
        <extension>css</extension>
        <directory>src</directory>
      </metadata>
      <content>#root {
  max-width: 1280px;
  margin: 0 auto;
  padding: 2rem;
  text-align: center;
}

.logo {
  height: 6em;
  padding: 1.5em;
  will-change: filter;
  transition: filter 300ms;
}
.logo:hover {
  filter: drop-shadow(0 0 2em #646cffaa);
}
.logo.react:hover {
  filter: drop-shadow(0 0 2em #61dafbaa);
}

@keyframes logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@media (prefers-reduced-motion: no-preference) {
  a:nth-of-type(2) .logo {
    animation: logo-spin infinite 20s linear;
  }
}

.card {
  padding: 2em;
}

.read-the-docs {
  color: #888;
}
</content>
    </document>

    <document>
      <source>src/main.tsx</source>
      <tags></tags>
      <metadata>
        <size>230</size>
        <lastModified>2025-05-26T02:28:07.078Z</lastModified>
        <extension>tsx</extension>
        <directory>src</directory>
      </metadata>
      <content>import { StrictMode } from &#39;react&#39;
import { createRoot } from &#39;react-dom/client&#39;
import &#39;./index.css&#39;
import App from &#39;./App.tsx&#39;

createRoot(document.getElementById(&#39;root&#39;)!).render(
  &lt;StrictMode&gt;
    &lt;App /&gt;
  &lt;/StrictMode&gt;,
)
</content>
    </document>

    <document>
      <source>src/vite-env.d.ts</source>
      <tags></tags>
      <metadata>
        <size>38</size>
        <lastModified>2025-05-26T02:28:07.078Z</lastModified>
        <extension>ts</extension>
        <directory>src</directory>
      </metadata>
      <content>/// &lt;reference types=&quot;vite/client&quot; /&gt;
</content>
    </document>

    <document>
      <source>.gitignore</source>
      <tags></tags>
      <metadata>
        <size>253</size>
        <lastModified>2025-05-26T02:28:07.073Z</lastModified>
        <extension>gitignore</extension>
        <directory>Root</directory>
      </metadata>
      <content># Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?
</content>
    </document>

    <document>
      <source>tsconfig.app.json</source>
      <tags></tags>
      <metadata>
        <size>787</size>
        <lastModified>2025-05-26T02:29:35.638Z</lastModified>
        <extension>json</extension>
        <directory>Root</directory>
      </metadata>
      <content>{
  &quot;compilerOptions&quot;: {
      &quot;baseUrl&quot;: &quot;.&quot;,
    &quot;paths&quot;: {
      &quot;@/*&quot;: [
        &quot;./src/*&quot;
      ]
    },
    &quot;tsBuildInfoFile&quot;: &quot;./node_modules/.tmp/tsconfig.app.tsbuildinfo&quot;,
    &quot;target&quot;: &quot;ES2020&quot;,
    &quot;useDefineForClassFields&quot;: true,
    &quot;lib&quot;: [&quot;ES2020&quot;, &quot;DOM&quot;, &quot;DOM.Iterable&quot;],
    &quot;module&quot;: &quot;ESNext&quot;,
    &quot;skipLibCheck&quot;: true,

    /* Bundler mode */
    &quot;moduleResolution&quot;: &quot;bundler&quot;,
    &quot;allowImportingTsExtensions&quot;: true,
    &quot;verbatimModuleSyntax&quot;: true,
    &quot;moduleDetection&quot;: &quot;force&quot;,
    &quot;noEmit&quot;: true,
    &quot;jsx&quot;: &quot;react-jsx&quot;,

    /* Linting */
    &quot;strict&quot;: true,
    &quot;noUnusedLocals&quot;: true,
    &quot;noUnusedParameters&quot;: true,
    &quot;erasableSyntaxOnly&quot;: true,
    &quot;noFallthroughCasesInSwitch&quot;: true,
    &quot;noUncheckedSideEffectImports&quot;: true
  },
  &quot;include&quot;: [&quot;src&quot;]
}
</content>
    </document>

    <document>
      <source>index.html</source>
      <tags></tags>
      <metadata>
        <size>366</size>
        <lastModified>2025-05-26T02:28:07.074Z</lastModified>
        <extension>html</extension>
        <directory>Root</directory>
      </metadata>
      <content>&lt;!doctype html&gt;
&lt;html lang=&quot;en&quot;&gt;
  &lt;head&gt;
    &lt;meta charset=&quot;UTF-8&quot; /&gt;
    &lt;link rel=&quot;icon&quot; type=&quot;image/svg+xml&quot; href=&quot;/vite.svg&quot; /&gt;
    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;
    &lt;title&gt;Vite + React + TS&lt;/title&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;div id=&quot;root&quot;&gt;&lt;/div&gt;
    &lt;script type=&quot;module&quot; src=&quot;/src/main.tsx&quot;&gt;&lt;/script&gt;
  &lt;/body&gt;
&lt;/html&gt;
</content>
    </document>

    <document>
      <source>.env</source>
      <tags></tags>
      <metadata>
        <size>106</size>
        <lastModified>2025-05-26T02:35:11.757Z</lastModified>
        <extension>env</extension>
        <directory>Root</directory>
      </metadata>
      <content># Copy to .env.local and add your Helius API key
VITE_HELIUS_API_KEY=8cc07016-410c-42aa-9220-a8a67cdbb6f7
</content>
    </document>

    <document>
      <source>tsconfig.node.json</source>
      <tags></tags>
      <metadata>
        <size>630</size>
        <lastModified>2025-05-26T02:28:07.080Z</lastModified>
        <extension>json</extension>
        <directory>Root</directory>
      </metadata>
      <content>{
  &quot;compilerOptions&quot;: {
    &quot;tsBuildInfoFile&quot;: &quot;./node_modules/.tmp/tsconfig.node.tsbuildinfo&quot;,
    &quot;target&quot;: &quot;ES2022&quot;,
    &quot;lib&quot;: [&quot;ES2023&quot;],
    &quot;module&quot;: &quot;ESNext&quot;,
    &quot;skipLibCheck&quot;: true,

    /* Bundler mode */
    &quot;moduleResolution&quot;: &quot;bundler&quot;,
    &quot;allowImportingTsExtensions&quot;: true,
    &quot;verbatimModuleSyntax&quot;: true,
    &quot;moduleDetection&quot;: &quot;force&quot;,
    &quot;noEmit&quot;: true,

    /* Linting */
    &quot;strict&quot;: true,
    &quot;noUnusedLocals&quot;: true,
    &quot;noUnusedParameters&quot;: true,
    &quot;erasableSyntaxOnly&quot;: true,
    &quot;noFallthroughCasesInSwitch&quot;: true,
    &quot;noUncheckedSideEffectImports&quot;: true
  },
  &quot;include&quot;: [&quot;vite.config.ts&quot;]
}
</content>
    </document>

    <document>
      <source>components.json</source>
      <tags></tags>
      <metadata>
        <size>425</size>
        <lastModified>2025-05-26T02:31:10.888Z</lastModified>
        <extension>json</extension>
        <directory>Root</directory>
      </metadata>
      <content>{
  &quot;$schema&quot;: &quot;https://ui.shadcn.com/schema.json&quot;,
  &quot;style&quot;: &quot;new-york&quot;,
  &quot;rsc&quot;: false,
  &quot;tsx&quot;: true,
  &quot;tailwind&quot;: {
    &quot;config&quot;: &quot;&quot;,
    &quot;css&quot;: &quot;src/index.css&quot;,
    &quot;baseColor&quot;: &quot;neutral&quot;,
    &quot;cssVariables&quot;: true,
    &quot;prefix&quot;: &quot;&quot;
  },
  &quot;aliases&quot;: {
    &quot;components&quot;: &quot;@/components&quot;,
    &quot;utils&quot;: &quot;@/lib/utils&quot;,
    &quot;ui&quot;: &quot;@/components/ui&quot;,
    &quot;lib&quot;: &quot;@/lib&quot;,
    &quot;hooks&quot;: &quot;@/hooks&quot;
  },
  &quot;iconLibrary&quot;: &quot;lucide&quot;
}</content>
    </document>

    <document>
      <source>tsconfig.json</source>
      <tags></tags>
      <metadata>
        <size>233</size>
        <lastModified>2025-05-26T02:29:04.749Z</lastModified>
        <extension>json</extension>
        <directory>Root</directory>
      </metadata>
      <content>{
  &quot;files&quot;: [],
  &quot;references&quot;: [
    {
      &quot;path&quot;: &quot;./tsconfig.app.json&quot;
    },
    {
      &quot;path&quot;: &quot;./tsconfig.node.json&quot;
    }
  ],
  &quot;compilerOptions&quot;: {
    &quot;baseUrl&quot;: &quot;.&quot;,
    &quot;paths&quot;: {
      &quot;@/*&quot;: [&quot;./src/*&quot;]
    }
  }
}
</content>
    </document>

    <document>
      <source>README.md</source>
      <tags></tags>
      <metadata>
        <size>5</size>
        <lastModified>2025-05-26T02:36:50.222Z</lastModified>
        <extension>md</extension>
        <directory>Root</directory>
      </metadata>
      <content>todo
</content>
    </document>

    <document>
      <source>package.json</source>
      <tags></tags>
      <metadata>
        <size>1029</size>
        <lastModified>2025-05-26T02:35:20.204Z</lastModified>
        <extension>json</extension>
        <directory>Root</directory>
      </metadata>
      <content>{
  &quot;name&quot;: &quot;solana-bundler-detector&quot;,
  &quot;private&quot;: true,
  &quot;version&quot;: &quot;0.0.0&quot;,
  &quot;type&quot;: &quot;module&quot;,
  &quot;scripts&quot;: {
    &quot;dev&quot;: &quot;vite&quot;,
    &quot;build&quot;: &quot;tsc -b &amp;&amp; vite build&quot;,
    &quot;lint&quot;: &quot;eslint .&quot;,
    &quot;preview&quot;: &quot;vite preview&quot;
  },
  &quot;dependencies&quot;: {
    &quot;@radix-ui/react-progress&quot;: &quot;^1.1.7&quot;,
    &quot;@radix-ui/react-slot&quot;: &quot;^1.2.3&quot;,
    &quot;@tailwindcss/vite&quot;: &quot;^4.1.7&quot;,
    &quot;class-variance-authority&quot;: &quot;^0.7.1&quot;,
    &quot;clsx&quot;: &quot;^2.1.1&quot;,
    &quot;lucide-react&quot;: &quot;^0.511.0&quot;,
    &quot;react&quot;: &quot;^19.1.0&quot;,
    &quot;react-dom&quot;: &quot;^19.1.0&quot;,
    &quot;tailwind-merge&quot;: &quot;^3.3.0&quot;,
    &quot;tailwindcss&quot;: &quot;^4.1.7&quot;
  },
  &quot;devDependencies&quot;: {
    &quot;@eslint/js&quot;: &quot;^9.25.0&quot;,
    &quot;@types/node&quot;: &quot;^22.15.21&quot;,
    &quot;@types/react&quot;: &quot;^19.1.2&quot;,
    &quot;@types/react-dom&quot;: &quot;^19.1.2&quot;,
    &quot;@vitejs/plugin-react&quot;: &quot;^4.4.1&quot;,
    &quot;eslint&quot;: &quot;^9.25.0&quot;,
    &quot;eslint-plugin-react-hooks&quot;: &quot;^5.2.0&quot;,
    &quot;eslint-plugin-react-refresh&quot;: &quot;^0.4.19&quot;,
    &quot;globals&quot;: &quot;^16.0.0&quot;,
    &quot;tw-animate-css&quot;: &quot;^1.3.0&quot;,
    &quot;typescript&quot;: &quot;~5.8.3&quot;,
    &quot;typescript-eslint&quot;: &quot;^8.30.1&quot;,
    &quot;vite&quot;: &quot;^6.3.5&quot;
  }
}
</content>
    </document>

    <document>
      <source>eslint.config.js</source>
      <tags></tags>
      <metadata>
        <size>734</size>
        <lastModified>2025-05-26T02:28:07.073Z</lastModified>
        <extension>js</extension>
        <directory>Root</directory>
      </metadata>
      <content>import js from &#39;@eslint/js&#39;
import globals from &#39;globals&#39;
import reactHooks from &#39;eslint-plugin-react-hooks&#39;
import reactRefresh from &#39;eslint-plugin-react-refresh&#39;
import tseslint from &#39;typescript-eslint&#39;

export default tseslint.config(
  { ignores: [&#39;dist&#39;] },
  {
    extends: [js.configs.recommended, ...tseslint.configs.recommended],
    files: [&#39;**/*.{ts,tsx}&#39;],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
    },
    plugins: {
      &#39;react-hooks&#39;: reactHooks,
      &#39;react-refresh&#39;: reactRefresh,
    },
    rules: {
      ...reactHooks.configs.recommended.rules,
      &#39;react-refresh/only-export-components&#39;: [
        &#39;warn&#39;,
        { allowConstantExport: true },
      ],
    },
  },
)
</content>
    </document>

    <document>
      <source>vite.config.ts</source>
      <tags></tags>
      <metadata>
        <size>327</size>
        <lastModified>2025-05-26T02:30:07.907Z</lastModified>
        <extension>ts</extension>
        <directory>Root</directory>
      </metadata>
      <content>import path from &#39;path&#39;
import tailwindcss from &#39;@tailwindcss/vite&#39;
import react from &#39;@vitejs/plugin-react&#39;
import { defineConfig } from &#39;vite&#39;

// https://vite.dev/config/
export default defineConfig({
  plugins: [react(), tailwindcss()],
  resolve: {
    alias: {
      &#39;@&#39;: path.resolve(__dirname, &#39;./src&#39;),
    },
  },
})
</content>
    </document>
    
  </documents>

</bundle>