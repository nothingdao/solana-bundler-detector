<?xml version="1.0" encoding="UTF-8"?>
<bundle id="master-2025-05-26T04-01-46-371Z" created="2025-05-26T04:01:46.373Z" fileCount="23">
  
  <metadata>
    <projectName>project</projectName>
    <totalFiles>23</totalFiles>
    <bundleType>master</bundleType>
    <ignorePatterns>
      <pattern>node_modules</pattern>
      <pattern>.git</pattern>
      <pattern>dist</pattern>
      <pattern>build</pattern>
      <pattern>coverage</pattern>
      <pattern>.next</pattern>
      <pattern>.cache</pattern>
      <pattern>.netlify</pattern>
      <pattern>package-lock.json</pattern>
      <pattern>yarn.lock</pattern>
      <pattern>.DS_Store</pattern>
      <pattern>Thumbs.db</pattern>
      <pattern>*.mp3</pattern>
      <pattern>*.mp4</pattern>
      <pattern>*.wav</pattern>
      <pattern>*.ogg</pattern>
      <pattern>*.m4a</pattern>
      <pattern>*.flac</pattern>
      <pattern>*.jpg</pattern>
      <pattern>*.jpeg</pattern>
      <pattern>*.png</pattern>
      <pattern>*.gif</pattern>
      <pattern>*.webp</pattern>
      <pattern>*.svg</pattern>
      <pattern>*.ico</pattern>
      <pattern>*.pxd</pattern>
      <pattern>*.pdf</pattern>
      <pattern>*.doc</pattern>
      <pattern>*.docx</pattern>
      <pattern>*.zip</pattern>
      <pattern>*.tar</pattern>
      <pattern>*.gz</pattern>
      <pattern>*.rar</pattern>
      <pattern>example-project</pattern>
      <pattern>issues</pattern>
    </ignorePatterns>
  </metadata>

  <directoryTree>
  <directory name="src" path="src">
    <directory name="components" path="src/components">
      <directory name="ui" path="src/components/ui">
        <file name="badge.tsx" path="src/components/ui/badge.tsx" size="0" lastModified="2025-05-26T02:34:06.956Z">
          <tags></tags>
        </file>
        <file name="button.tsx" path="src/components/ui/button.tsx" size="0" lastModified="2025-05-26T02:31:42.872Z">
          <tags></tags>
        </file>
        <file name="card.tsx" path="src/components/ui/card.tsx" size="0" lastModified="2025-05-26T02:31:50.294Z">
          <tags></tags>
        </file>
        <file name="input.tsx" path="src/components/ui/input.tsx" size="0" lastModified="2025-05-26T02:31:46.613Z">
          <tags></tags>
        </file>
        <file name="progress.tsx" path="src/components/ui/progress.tsx" size="0" lastModified="2025-05-26T02:35:20.958Z">
          <tags></tags>
        </file>
      </directory>
    </directory>
    <directory name="lib" path="src/lib">
      <file name="analyzer.ts" path="src/lib/analyzer.ts" size="0" lastModified="2025-05-26T03:58:27.064Z">
        <tags></tags>
      </file>
      <file name="utils.ts" path="src/lib/utils.ts" size="0" lastModified="2025-05-26T02:31:18.948Z">
        <tags></tags>
      </file>
    </directory>
    <file name="App.css" path="src/App.css" size="0" lastModified="2025-05-26T02:28:07.075Z">
      <tags></tags>
    </file>
    <file name="App.tsx" path="src/App.tsx" size="0" lastModified="2025-05-26T03:49:54.485Z">
      <tags></tags>
    </file>
    <file name="index.css" path="src/index.css" size="0" lastModified="2025-05-26T02:31:11.428Z">
      <tags></tags>
    </file>
    <file name="main.tsx" path="src/main.tsx" size="0" lastModified="2025-05-26T02:28:07.078Z">
      <tags></tags>
    </file>
    <file name="vite-env.d.ts" path="src/vite-env.d.ts" size="0" lastModified="2025-05-26T02:28:07.078Z">
      <tags></tags>
    </file>
  </directory>
  <file name=".env" path=".env" size="0" lastModified="2025-05-26T02:35:11.757Z">
    <tags></tags>
  </file>
  <file name=".gitignore" path=".gitignore" size="0" lastModified="2025-05-26T02:28:07.073Z">
    <tags></tags>
  </file>
  <file name="components.json" path="components.json" size="0" lastModified="2025-05-26T02:31:10.888Z">
    <tags></tags>
  </file>
  <file name="eslint.config.js" path="eslint.config.js" size="0" lastModified="2025-05-26T02:28:07.073Z">
    <tags></tags>
  </file>
  <file name="index.html" path="index.html" size="0" lastModified="2025-05-26T02:28:07.074Z">
    <tags></tags>
  </file>
  <file name="package.json" path="package.json" size="0" lastModified="2025-05-26T02:35:20.204Z">
    <tags></tags>
  </file>
  <file name="README.md" path="README.md" size="0" lastModified="2025-05-26T02:36:50.222Z">
    <tags></tags>
  </file>
  <file name="tsconfig.app.json" path="tsconfig.app.json" size="0" lastModified="2025-05-26T04:01:24.998Z">
    <tags></tags>
  </file>
  <file name="tsconfig.json" path="tsconfig.json" size="0" lastModified="2025-05-26T02:29:04.749Z">
    <tags></tags>
  </file>
  <file name="tsconfig.node.json" path="tsconfig.node.json" size="0" lastModified="2025-05-26T04:01:31.630Z">
    <tags></tags>
  </file>
  <file name="vite.config.ts" path="vite.config.ts" size="0" lastModified="2025-05-26T02:30:07.907Z">
    <tags></tags>
  </file>
</directoryTree>

  <asciiTree>
project/
├── src/
│   ├── components/
│   │   └── ui/
│   │       ├── badge.tsx
│   │       ├── button.tsx
│   │       ├── card.tsx
│   │       ├── input.tsx
│   │       └── progress.tsx
│   ├── lib/
│   │   ├── analyzer.ts
│   │   └── utils.ts
│   ├── App.css
│   ├── App.tsx
│   ├── index.css
│   ├── main.tsx
│   └── vite-env.d.ts
├── .env
├── .gitignore
├── components.json
├── eslint.config.js
├── index.html
├── package.json
├── README.md
├── tsconfig.app.json
├── tsconfig.json
├── tsconfig.node.json
└── vite.config.ts

23 files, 4 directories
  </asciiTree>

  <documents>
    
    <document>
      <source>src/components/ui/progress.tsx</source>
      <tags></tags>
      <metadata>
        <size>726</size>
        <lastModified>2025-05-26T02:35:20.958Z</lastModified>
        <extension>tsx</extension>
        <directory>src/components/ui</directory>
      </metadata>
      <content>import * as React from &quot;react&quot;
import * as ProgressPrimitive from &quot;@radix-ui/react-progress&quot;

import { cn } from &quot;@/lib/utils&quot;

function Progress({
  className,
  value,
  ...props
}: React.ComponentProps&lt;typeof ProgressPrimitive.Root&gt;) {
  return (
    &lt;ProgressPrimitive.Root
      data-slot=&quot;progress&quot;
      className={cn(
        &quot;bg-primary/20 relative h-2 w-full overflow-hidden rounded-full&quot;,
        className
      )}
      {...props}
    &gt;
      &lt;ProgressPrimitive.Indicator
        data-slot=&quot;progress-indicator&quot;
        className=&quot;bg-primary h-full w-full flex-1 transition-all&quot;
        style={{ transform: `translateX(-${100 - (value || 0)}%)` }}
      /&gt;
    &lt;/ProgressPrimitive.Root&gt;
  )
}

export { Progress }
</content>
    </document>

    <document>
      <source>src/components/ui/badge.tsx</source>
      <tags></tags>
      <metadata>
        <size>1631</size>
        <lastModified>2025-05-26T02:34:06.956Z</lastModified>
        <extension>tsx</extension>
        <directory>src/components/ui</directory>
      </metadata>
      <content>import * as React from &quot;react&quot;
import { Slot } from &quot;@radix-ui/react-slot&quot;
import { cva, type VariantProps } from &quot;class-variance-authority&quot;

import { cn } from &quot;@/lib/utils&quot;

const badgeVariants = cva(
  &quot;inline-flex items-center justify-center rounded-md border px-2 py-0.5 text-xs font-medium w-fit whitespace-nowrap shrink-0 [&amp;&gt;svg]:size-3 gap-1 [&amp;&gt;svg]:pointer-events-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive transition-[color,box-shadow] overflow-hidden&quot;,
  {
    variants: {
      variant: {
        default:
          &quot;border-transparent bg-primary text-primary-foreground [a&amp;]:hover:bg-primary/90&quot;,
        secondary:
          &quot;border-transparent bg-secondary text-secondary-foreground [a&amp;]:hover:bg-secondary/90&quot;,
        destructive:
          &quot;border-transparent bg-destructive text-white [a&amp;]:hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60&quot;,
        outline:
          &quot;text-foreground [a&amp;]:hover:bg-accent [a&amp;]:hover:text-accent-foreground&quot;,
      },
    },
    defaultVariants: {
      variant: &quot;default&quot;,
    },
  }
)

function Badge({
  className,
  variant,
  asChild = false,
  ...props
}: React.ComponentProps&lt;&quot;span&quot;&gt; &amp;
  VariantProps&lt;typeof badgeVariants&gt; &amp; { asChild?: boolean }) {
  const Comp = asChild ? Slot : &quot;span&quot;

  return (
    &lt;Comp
      data-slot=&quot;badge&quot;
      className={cn(badgeVariants({ variant }), className)}
      {...props}
    /&gt;
  )
}

export { Badge, badgeVariants }
</content>
    </document>

    <document>
      <source>src/components/ui/card.tsx</source>
      <tags></tags>
      <metadata>
        <size>1989</size>
        <lastModified>2025-05-26T02:31:50.294Z</lastModified>
        <extension>tsx</extension>
        <directory>src/components/ui</directory>
      </metadata>
      <content>import * as React from &quot;react&quot;

import { cn } from &quot;@/lib/utils&quot;

function Card({ className, ...props }: React.ComponentProps&lt;&quot;div&quot;&gt;) {
  return (
    &lt;div
      data-slot=&quot;card&quot;
      className={cn(
        &quot;bg-card text-card-foreground flex flex-col gap-6 rounded-xl border py-6 shadow-sm&quot;,
        className
      )}
      {...props}
    /&gt;
  )
}

function CardHeader({ className, ...props }: React.ComponentProps&lt;&quot;div&quot;&gt;) {
  return (
    &lt;div
      data-slot=&quot;card-header&quot;
      className={cn(
        &quot;@container/card-header grid auto-rows-min grid-rows-[auto_auto] items-start gap-1.5 px-6 has-data-[slot=card-action]:grid-cols-[1fr_auto] [.border-b]:pb-6&quot;,
        className
      )}
      {...props}
    /&gt;
  )
}

function CardTitle({ className, ...props }: React.ComponentProps&lt;&quot;div&quot;&gt;) {
  return (
    &lt;div
      data-slot=&quot;card-title&quot;
      className={cn(&quot;leading-none font-semibold&quot;, className)}
      {...props}
    /&gt;
  )
}

function CardDescription({ className, ...props }: React.ComponentProps&lt;&quot;div&quot;&gt;) {
  return (
    &lt;div
      data-slot=&quot;card-description&quot;
      className={cn(&quot;text-muted-foreground text-sm&quot;, className)}
      {...props}
    /&gt;
  )
}

function CardAction({ className, ...props }: React.ComponentProps&lt;&quot;div&quot;&gt;) {
  return (
    &lt;div
      data-slot=&quot;card-action&quot;
      className={cn(
        &quot;col-start-2 row-span-2 row-start-1 self-start justify-self-end&quot;,
        className
      )}
      {...props}
    /&gt;
  )
}

function CardContent({ className, ...props }: React.ComponentProps&lt;&quot;div&quot;&gt;) {
  return (
    &lt;div
      data-slot=&quot;card-content&quot;
      className={cn(&quot;px-6&quot;, className)}
      {...props}
    /&gt;
  )
}

function CardFooter({ className, ...props }: React.ComponentProps&lt;&quot;div&quot;&gt;) {
  return (
    &lt;div
      data-slot=&quot;card-footer&quot;
      className={cn(&quot;flex items-center px-6 [.border-t]:pt-6&quot;, className)}
      {...props}
    /&gt;
  )
}

export {
  Card,
  CardHeader,
  CardFooter,
  CardTitle,
  CardAction,
  CardDescription,
  CardContent,
}
</content>
    </document>

    <document>
      <source>src/components/ui/input.tsx</source>
      <tags></tags>
      <metadata>
        <size>967</size>
        <lastModified>2025-05-26T02:31:46.613Z</lastModified>
        <extension>tsx</extension>
        <directory>src/components/ui</directory>
      </metadata>
      <content>import * as React from &quot;react&quot;

import { cn } from &quot;@/lib/utils&quot;

function Input({ className, type, ...props }: React.ComponentProps&lt;&quot;input&quot;&gt;) {
  return (
    &lt;input
      type={type}
      data-slot=&quot;input&quot;
      className={cn(
        &quot;file:text-foreground placeholder:text-muted-foreground selection:bg-primary selection:text-primary-foreground dark:bg-input/30 border-input flex h-9 w-full min-w-0 rounded-md border bg-transparent px-3 py-1 text-base shadow-xs transition-[color,box-shadow] outline-none file:inline-flex file:h-7 file:border-0 file:bg-transparent file:text-sm file:font-medium disabled:pointer-events-none disabled:cursor-not-allowed disabled:opacity-50 md:text-sm&quot;,
        &quot;focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px]&quot;,
        &quot;aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive&quot;,
        className
      )}
      {...props}
    /&gt;
  )
}

export { Input }
</content>
    </document>

    <document>
      <source>src/components/ui/button.tsx</source>
      <tags></tags>
      <metadata>
        <size>2123</size>
        <lastModified>2025-05-26T02:31:42.872Z</lastModified>
        <extension>tsx</extension>
        <directory>src/components/ui</directory>
      </metadata>
      <content>import * as React from &quot;react&quot;
import { Slot } from &quot;@radix-ui/react-slot&quot;
import { cva, type VariantProps } from &quot;class-variance-authority&quot;

import { cn } from &quot;@/lib/utils&quot;

const buttonVariants = cva(
  &quot;inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&amp;_svg]:pointer-events-none [&amp;_svg:not([class*=&#39;size-&#39;])]:size-4 shrink-0 [&amp;_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive&quot;,
  {
    variants: {
      variant: {
        default:
          &quot;bg-primary text-primary-foreground shadow-xs hover:bg-primary/90&quot;,
        destructive:
          &quot;bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60&quot;,
        outline:
          &quot;border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50&quot;,
        secondary:
          &quot;bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80&quot;,
        ghost:
          &quot;hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50&quot;,
        link: &quot;text-primary underline-offset-4 hover:underline&quot;,
      },
      size: {
        default: &quot;h-9 px-4 py-2 has-[&gt;svg]:px-3&quot;,
        sm: &quot;h-8 rounded-md gap-1.5 px-3 has-[&gt;svg]:px-2.5&quot;,
        lg: &quot;h-10 rounded-md px-6 has-[&gt;svg]:px-4&quot;,
        icon: &quot;size-9&quot;,
      },
    },
    defaultVariants: {
      variant: &quot;default&quot;,
      size: &quot;default&quot;,
    },
  }
)

function Button({
  className,
  variant,
  size,
  asChild = false,
  ...props
}: React.ComponentProps&lt;&quot;button&quot;&gt; &amp;
  VariantProps&lt;typeof buttonVariants&gt; &amp; {
    asChild?: boolean
  }) {
  const Comp = asChild ? Slot : &quot;button&quot;

  return (
    &lt;Comp
      data-slot=&quot;button&quot;
      className={cn(buttonVariants({ variant, size, className }))}
      {...props}
    /&gt;
  )
}

export { Button, buttonVariants }
</content>
    </document>

    <document>
      <source>src/lib/utils.ts</source>
      <tags></tags>
      <metadata>
        <size>166</size>
        <lastModified>2025-05-26T02:31:18.948Z</lastModified>
        <extension>ts</extension>
        <directory>src/lib</directory>
      </metadata>
      <content>import { clsx, type ClassValue } from &quot;clsx&quot;
import { twMerge } from &quot;tailwind-merge&quot;

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}
</content>
    </document>

    <document>
      <source>src/lib/analyzer.ts</source>
      <tags></tags>
      <metadata>
        <size>15971</size>
        <lastModified>2025-05-26T03:58:27.064Z</lastModified>
        <extension>ts</extension>
        <directory>src/lib</directory>
      </metadata>
      <content>// lib/analyzer.ts
export interface AnalysisResult {
  score: number
  metrics: {
    timingCluster: number
    walletSimilarity: number
    sizePatterns: number
    distribution: number
  }
  details: {
    totalTransactions: number
    uniqueWallets: number
    analysisPeriod: string
    suspiciousWallets: number
  }
  insights: {
    riskLevel: string
    primaryConcerns: string[]
    recommendations: string[]
    explanation: string
  }
}

interface TokenTransfer {
  signature: string
  timestamp: number
  from: string
  to: string
  amount: number
  slot: number
}

interface SignatureResult {
  signature: string
}

export async function analyzeToken(
  contractAddress: string,
  period: &#39;launch&#39; | &#39;recent&#39; | &#39;custom&#39;,
  apiKey: string
): Promise&lt;AnalysisResult&gt; {
  if (!apiKey) {
    throw new Error(
      &#39;Helius API key is required. Please configure it in Settings.&#39;
    )
  }

  console.log(`Analyzing ${contractAddress} for ${period} period`)

  try {
    // Get token transfers
    const transfers = await getTokenTransfers(contractAddress, period, apiKey)

    if (transfers.length === 0) {
      throw new Error(&#39;No transactions found for this token&#39;)
    }

    // Analyze the transfers
    const analysis = await analyzeBundlingPatterns(transfers)

    return analysis
  } catch (error) {
    console.error(&#39;Analysis failed:&#39;, error)
    throw new Error(
      `Analysis failed: ${
        error instanceof Error ? error.message : &#39;Unknown error&#39;
      }`
    )
  }
}

async function getTokenTransfers(
  contractAddress: string,
  period: string,
  apiKey: string
): Promise&lt;TokenTransfer[]&gt; {
  const HELIUS_URL = `https://mainnet.helius-rpc.com/?api-key=${apiKey}`

  try {
    // Step 1: Get signatures for the token address using standard RPC
    const signaturesResponse = await fetch(HELIUS_URL, {
      method: &#39;POST&#39;,
      headers: {
        &#39;Content-Type&#39;: &#39;application/json&#39;,
      },
      body: JSON.stringify({
        jsonrpc: &#39;2.0&#39;,
        id: &#39;get-signatures&#39;,
        method: &#39;getSignaturesForAddress&#39;,
        params: [
          contractAddress,
          {
            limit: period === &#39;recent&#39; ? 50 : 25,
            commitment: &#39;confirmed&#39;,
          },
        ],
      }),
    })

    const signaturesData = await signaturesResponse.json()

    if (signaturesData.error) {
      // If long-term storage fails, try with fewer results
      if (signaturesData.error.message?.includes(&#39;long-term storage&#39;)) {
        console.warn(&#39;Long-term storage issue, trying with reduced limit...&#39;)
        return await getTokenTransfersWithReducedLimit(
          contractAddress,
          10,
          apiKey
        )
      }
      throw new Error(`Helius RPC error: ${signaturesData.error.message}`)
    }

    const signatures = signaturesData.result || []

    if (signatures.length === 0) {
      throw new Error(&#39;No transactions found for this token address&#39;)
    }

    // Step 2: Use Helius Enhanced Transactions API with smaller batches
    const batchSize = 10
    const transfers: TokenTransfer[] = []

    for (let i = 0; i &lt; Math.min(signatures.length, 20); i += batchSize) {
      const batch = signatures.slice(i, i + batchSize)

      try {
        const enhancedResponse = await fetch(
          `https://api.helius.xyz/v0/transactions?api-key=${apiKey}`,
          {
            method: &#39;POST&#39;,
            headers: {
              &#39;Content-Type&#39;: &#39;application/json&#39;,
            },
            body: JSON.stringify({
              transactions: batch.map((sig: SignatureResult) =&gt; sig.signature),
            }),
          }
        )

        if (!enhancedResponse.ok) {
          console.warn(
            `Enhanced API batch failed: ${enhancedResponse.status}, continuing with next batch...`
          )
          continue
        }

        const enhancedData = await enhancedResponse.json()

        // Parse enhanced transactions to extract token transfers
        for (const tx of enhancedData) {
          if (!tx || tx.transactionError) continue

          const timestamp = tx.timestamp ? tx.timestamp * 1000 : Date.now()
          const signature = tx.signature
          const slot = tx.slot || 0

          // Extract token transfers from the enhanced transaction
          if (tx.tokenTransfers &amp;&amp; tx.tokenTransfers.length &gt; 0) {
            for (const transfer of tx.tokenTransfers) {
              // Only include transfers for our target token
              if (
                transfer.mint === contractAddress &amp;&amp;
                transfer.tokenAmount &gt; 0
              ) {
                transfers.push({
                  signature,
                  timestamp,
                  from: transfer.fromUserAccount || &#39;unknown&#39;,
                  to: transfer.toUserAccount || &#39;unknown&#39;,
                  amount: transfer.tokenAmount || 0,
                  slot,
                })
              }
            }
          }
        }

        // Small delay between batches to be nice to the API
        await new Promise((resolve) =&gt; setTimeout(resolve, 100))
      } catch (batchError) {
        console.warn(&#39;Batch processing error, continuing:&#39;, batchError)
        continue
      }
    }

    if (transfers.length === 0) {
      throw new Error(&#39;No token transfers found in the analyzed transactions&#39;)
    }

    return transfers
  } catch (error) {
    console.error(&#39;Error fetching token transfers:&#39;, error)
    throw error
  }
}

// Fallback function with very reduced limits
async function getTokenTransfersWithReducedLimit(
  contractAddress: string,
  limit: number,
  apiKey: string
): Promise&lt;TokenTransfer[]&gt; {
  const HELIUS_URL = `https://mainnet.helius-rpc.com/?api-key=${apiKey}`

  const signaturesResponse = await fetch(HELIUS_URL, {
    method: &#39;POST&#39;,
    headers: {
      &#39;Content-Type&#39;: &#39;application/json&#39;,
    },
    body: JSON.stringify({
      jsonrpc: &#39;2.0&#39;,
      id: &#39;get-signatures-reduced&#39;,
      method: &#39;getSignaturesForAddress&#39;,
      params: [
        contractAddress,
        {
          limit,
          commitment: &#39;confirmed&#39;,
        },
      ],
    }),
  })

  const signaturesData = await signaturesResponse.json()

  if (signaturesData.error) {
    throw new Error(
      `Reduced query also failed: ${signaturesData.error.message}`
    )
  }

  const signatures = signaturesData.result || []

  if (signatures.length === 0) {
    throw new Error(&#39;No recent transactions found for this token&#39;)
  }

  // Try enhanced API with just the most recent few transactions
  const enhancedResponse = await fetch(
    `https://api.helius.xyz/v0/transactions?api-key=${apiKey}`,
    {
      method: &#39;POST&#39;,
      headers: {
        &#39;Content-Type&#39;: &#39;application/json&#39;,
      },
      body: JSON.stringify({
        transactions: signatures
          .slice(0, 5)
          .map((sig: SignatureResult) =&gt; sig.signature),
      }),
    }
  )

  if (!enhancedResponse.ok) {
    throw new Error(
      `Enhanced API failed even with reduced data: ${enhancedResponse.status}`
    )
  }

  const enhancedData = await enhancedResponse.json()
  const transfers: TokenTransfer[] = []

  for (const tx of enhancedData) {
    if (!tx || tx.transactionError) continue

    const timestamp = tx.timestamp ? tx.timestamp * 1000 : Date.now()
    const signature = tx.signature
    const slot = tx.slot || 0

    if (tx.tokenTransfers &amp;&amp; tx.tokenTransfers.length &gt; 0) {
      for (const transfer of tx.tokenTransfers) {
        if (transfer.mint === contractAddress &amp;&amp; transfer.tokenAmount &gt; 0) {
          transfers.push({
            signature,
            timestamp,
            from: transfer.fromUserAccount || &#39;unknown&#39;,
            to: transfer.toUserAccount || &#39;unknown&#39;,
            amount: transfer.tokenAmount || 0,
            slot,
          })
        }
      }
    }
  }

  return transfers
}

async function analyzeBundlingPatterns(
  transfers: TokenTransfer[]
): Promise&lt;AnalysisResult&gt; {
  // Basic analysis implementation
  const uniqueWallets = new Set([
    ...transfers.map((t) =&gt; t.from),
    ...transfers.map((t) =&gt; t.to),
  ])
  const totalTransactions = transfers.length

  // Time clustering analysis
  const timingScore = analyzeTimeClustering(transfers)

  // Wallet similarity analysis
  const walletScore = analyzeWalletPatterns(transfers)

  // Transaction size patterns
  const sizeScore = analyzeTransactionSizes(transfers)

  // Distribution analysis
  const distributionScore = analyzeDistribution(transfers)

  // Calculate overall score
  const overallScore = Math.round(
    timingScore * 0.4 +
      walletScore * 0.3 +
      sizeScore * 0.2 +
      distributionScore * 0.1
  )

  // Count suspicious wallets (simple heuristic)
  const suspiciousWallets = countSuspiciousWallets(transfers)

  // Generate insights
  const insights = generateInsights(overallScore, {
    timingScore,
    walletScore,
    sizeScore,
    distributionScore,
  })

  return {
    score: overallScore,
    metrics: {
      timingCluster: timingScore,
      walletSimilarity: walletScore,
      sizePatterns: sizeScore,
      distribution: distributionScore,
    },
    details: {
      totalTransactions,
      uniqueWallets: uniqueWallets.size,
      analysisPeriod: getPeriodString(transfers),
      suspiciousWallets,
    },
    insights,
  }
}

function analyzeTimeClustering(transfers: TokenTransfer[]): number {
  if (transfers.length &lt; 2) return 0

  // Sort by timestamp
  const sorted = transfers.sort((a, b) =&gt; a.timestamp - b.timestamp)

  // Look for clusters of transactions within short time windows
  const timeWindows = [30, 60, 300] // 30s, 1min, 5min windows
  let maxClusterScore = 0

  for (const windowMs of timeWindows) {
    const clusters = []
    let currentCluster = [sorted[0]]

    for (let i = 1; i &lt; sorted.length; i++) {
      const timeDiff = sorted[i].timestamp - sorted[i - 1].timestamp

      if (timeDiff &lt;= windowMs * 1000) {
        currentCluster.push(sorted[i])
      } else {
        if (currentCluster.length &gt; 1) {
          clusters.push(currentCluster)
        }
        currentCluster = [sorted[i]]
      }
    }

    if (currentCluster.length &gt; 1) {
      clusters.push(currentCluster)
    }

    // Score based on largest cluster size
    const maxClusterSize = Math.max(...clusters.map((c) =&gt; c.length), 0)
    const clusterScore = Math.min(100, (maxClusterSize / sorted.length) * 200)
    maxClusterScore = Math.max(maxClusterScore, clusterScore)
  }

  return Math.round(maxClusterScore)
}

function analyzeWalletPatterns(transfers: TokenTransfer[]): number {
  // Simple wallet pattern analysis
  const walletCounts = new Map&lt;string, number&gt;()

  transfers.forEach((transfer) =&gt; {
    walletCounts.set(transfer.to, (walletCounts.get(transfer.to) || 0) + 1)
  })

  const counts = Array.from(walletCounts.values())
  const avgTransactionsPerWallet =
    counts.reduce((a, b) =&gt; a + b, 0) / counts.length

  // Higher score if wallets have similar transaction counts
  const variance =
    counts.reduce(
      (acc, count) =&gt; acc + Math.pow(count - avgTransactionsPerWallet, 2),
      0
    ) / counts.length
  const coefficient =
    variance &gt; 0 ? Math.sqrt(variance) / avgTransactionsPerWallet : 0

  // Lower coefficient = more similar = higher suspicion
  return Math.round(Math.max(0, 100 - coefficient * 50))
}

function analyzeTransactionSizes(transfers: TokenTransfer[]): number {
  if (transfers.length &lt; 2) return 0

  const amounts = transfers.map((t) =&gt; t.amount)
  const avg = amounts.reduce((a, b) =&gt; a + b, 0) / amounts.length

  // Check for suspiciously similar amounts
  const variance =
    amounts.reduce((acc, amount) =&gt; acc + Math.pow(amount - avg, 2), 0) /
    amounts.length
  const stdDev = Math.sqrt(variance)
  const coefficient = avg &gt; 0 ? stdDev / avg : 0

  // Lower coefficient = more similar amounts = higher suspicion
  return Math.round(Math.max(0, 100 - coefficient * 100))
}

function analyzeDistribution(transfers: TokenTransfer[]): number {
  // Analyze how concentrated the buying is
  const buyerAmounts = new Map&lt;string, number&gt;()

  transfers.forEach((transfer) =&gt; {
    const current = buyerAmounts.get(transfer.to) || 0
    buyerAmounts.set(transfer.to, current + transfer.amount)
  })

  const amounts = Array.from(buyerAmounts.values()).sort((a, b) =&gt; b - a)
  const totalAmount = amounts.reduce((a, b) =&gt; a + b, 0)

  // Calculate Gini coefficient (concentration)
  if (amounts.length &lt; 2 || totalAmount === 0) return 0

  let gini = 0
  for (let i = 0; i &lt; amounts.length; i++) {
    for (let j = 0; j &lt; amounts.length; j++) {
      gini += Math.abs(amounts[i] - amounts[j])
    }
  }

  gini = gini / (2 * amounts.length * totalAmount)

  // Higher Gini = more concentrated = more suspicious
  return Math.round(gini * 100)
}

function countSuspiciousWallets(transfers: TokenTransfer[]): number {
  // Simple heuristic: wallets with multiple transactions in short time
  const walletTimes = new Map&lt;string, number[]&gt;()

  transfers.forEach((transfer) =&gt; {
    if (!walletTimes.has(transfer.to)) {
      walletTimes.set(transfer.to, [])
    }
    walletTimes.get(transfer.to)!.push(transfer.timestamp)
  })

  let suspicious = 0
  walletTimes.forEach((times) =&gt; {
    if (times.length &gt; 1) {
      times.sort((a, b) =&gt; a - b)
      // Check for multiple transactions within 5 minutes
      for (let i = 1; i &lt; times.length; i++) {
        if (times[i] - times[i - 1] &lt; 300000) {
          // 5 minutes
          suspicious++
          break
        }
      }
    }
  })

  return suspicious
}

function generateInsights(
  overallScore: number,
  metrics: {
    timingScore: number
    walletScore: number
    sizeScore: number
    distributionScore: number
  }
) {
  const concerns = []
  const recommendations = []

  // Analyze each metric for concerns
  if (metrics.timingScore &gt; 70) {
    concerns.push(&#39;High coordination in transaction timing&#39;)
    recommendations.push(
      &#39;Investigate if transactions came from known bundling services&#39;
    )
  }

  if (metrics.walletScore &gt; 60) {
    concerns.push(&#39;Similar wallet behavior patterns detected&#39;)
    recommendations.push(
      &#39;Check if suspicious wallets share funding sources or creation dates&#39;
    )
  }

  if (metrics.sizeScore &gt; 60) {
    concerns.push(&#39;Automated transaction sizing patterns&#39;)
    recommendations.push(&#39;Verify if similar amounts indicate bot activity&#39;)
  }

  if (metrics.distributionScore &gt; 70) {
    concerns.push(&#39;High token concentration among few holders&#39;)
    recommendations.push(
      &#39;Monitor large holders for potential coordinated selling&#39;
    )
  }

  // Generate risk level
  let riskLevel = &#39;Low Risk&#39;
  if (overallScore &gt;= 80) riskLevel = &#39;High Risk&#39;
  else if (overallScore &gt;= 60) riskLevel = &#39;Medium Risk&#39;
  else if (overallScore &gt;= 40) riskLevel = &#39;Moderate Risk&#39;

  // Generate explanation
  let explanation = &#39;&#39;
  if (overallScore &gt;= 70) {
    explanation =
      &#39;Multiple indicators suggest coordinated buying activity. This could indicate bundled transactions, bot activity, or market manipulation.&#39;
  } else if (overallScore &gt;= 40) {
    explanation =
      &#39;Some patterns suggest possible coordination, but could also be normal market behavior during high activity periods.&#39;
  } else {
    explanation =
      &#39;Transaction patterns appear mostly organic with natural distribution and timing.&#39;
  }

  if (concerns.length === 0) {
    concerns.push(&#39;No major red flags detected&#39;)
    recommendations.push(
      &#39;Continue monitoring for any changes in trading patterns&#39;
    )
  }

  return {
    riskLevel,
    primaryConcerns: concerns,
    recommendations,
    explanation,
  }
}

function getPeriodString(transfers: TokenTransfer[]): string {
  if (transfers.length === 0) return &#39;0h&#39;

  const times = transfers.map((t) =&gt; t.timestamp).sort((a, b) =&gt; a - b)
  const duration = times[times.length - 1] - times[0]
  const hours = Math.round(duration / (1000 * 60 * 60))

  if (hours &lt; 24) return `${hours}h`
  return `${Math.round(hours / 24)}d`
}
</content>
    </document>

    <document>
      <source>src/main.tsx</source>
      <tags></tags>
      <metadata>
        <size>230</size>
        <lastModified>2025-05-26T02:28:07.078Z</lastModified>
        <extension>tsx</extension>
        <directory>src</directory>
      </metadata>
      <content>import { StrictMode } from &#39;react&#39;
import { createRoot } from &#39;react-dom/client&#39;
import &#39;./index.css&#39;
import App from &#39;./App.tsx&#39;

createRoot(document.getElementById(&#39;root&#39;)!).render(
  &lt;StrictMode&gt;
    &lt;App /&gt;
  &lt;/StrictMode&gt;,
)
</content>
    </document>

    <document>
      <source>src/App.tsx</source>
      <tags></tags>
      <metadata>
        <size>25101</size>
        <lastModified>2025-05-26T03:49:54.485Z</lastModified>
        <extension>tsx</extension>
        <directory>src</directory>
      </metadata>
      <content>import { useState, useEffect } from &#39;react&#39;;
import { Button } from &quot;@/components/ui/button&quot;;
import { Input } from &quot;@/components/ui/input&quot;;
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from &quot;@/components/ui/card&quot;;
import { Badge } from &quot;@/components/ui/badge&quot;;
import { Progress } from &quot;@/components/ui/progress&quot;;
import { analyzeToken } from &#39;./lib/analyzer&#39;;
import { AlertCircle, Info, TrendingUp, Users, DollarSign, BarChart3, Clipboard, CheckCircle2, Settings, Eye, EyeOff, ExternalLink } from &#39;lucide-react&#39;;

interface TokenInfo {
  symbol: string;
  name: string;
  image?: string;
  decimals?: number;
}

interface AnalysisResult {
  score: number;
  metrics: {
    timingCluster: number;
    walletSimilarity: number;
    sizePatterns: number;
    distribution: number;
  };
  details: {
    totalTransactions: number;
    uniqueWallets: number;
    analysisPeriod: string;
    suspiciousWallets: number;
  };
  insights: {
    riskLevel: string;
    primaryConcerns: string[];
    recommendations: string[];
    explanation: string;
  };
}

// Hook to get the current API key
function useHeliusApiKey() {
  const [apiKey, setApiKey] = useState(() =&gt; {
    return localStorage.getItem(&#39;helius_api_key&#39;) || &#39;&#39;;
  });

  useEffect(() =&gt; {
    const handleKeyUpdate = (event: CustomEvent) =&gt; {
      setApiKey(event.detail);
    };

    window.addEventListener(&#39;helius-key-updated&#39;, handleKeyUpdate as EventListener);

    return () =&gt; {
      window.removeEventListener(&#39;helius-key-updated&#39;, handleKeyUpdate as EventListener);
    };
  }, []);

  return apiKey;
}

// Settings Modal Component
function SettingsModal({ isOpen, onClose }: { isOpen: boolean; onClose: () =&gt; void }) {
  const [apiKey, setApiKey] = useState(&#39;&#39;);
  const [showKey, setShowKey] = useState(false);
  const [testStatus, setTestStatus] = useState&lt;&#39;idle&#39; | &#39;testing&#39; | &#39;success&#39; | &#39;error&#39;&gt;(&#39;idle&#39;);
  const [savedKey, setSavedKey] = useState(&#39;&#39;);

  useEffect(() =&gt; {
    if (isOpen) {
      const stored = localStorage.getItem(&#39;helius_api_key&#39;) || &#39;&#39;;
      setApiKey(stored);
      setSavedKey(stored);
    }
  }, [isOpen]);

  const handleSave = () =&gt; {
    localStorage.setItem(&#39;helius_api_key&#39;, apiKey);
    setSavedKey(apiKey);
    window.dispatchEvent(new CustomEvent(&#39;helius-key-updated&#39;, { detail: apiKey }));
  };

  const handleTest = async () =&gt; {
    if (!apiKey.trim()) return;

    setTestStatus(&#39;testing&#39;);

    try {
      const response = await fetch(`https://mainnet.helius-rpc.com/?api-key=${apiKey}`, {
        method: &#39;POST&#39;,
        headers: {
          &#39;Content-Type&#39;: &#39;application/json&#39;,
        },
        body: JSON.stringify({
          jsonrpc: &#39;2.0&#39;,
          id: &#39;test&#39;,
          method: &#39;getHealth&#39;
        })
      });

      if (response.ok) {
        setTestStatus(&#39;success&#39;);
        setTimeout(() =&gt; setTestStatus(&#39;idle&#39;), 3000);
      } else {
        setTestStatus(&#39;error&#39;);
        setTimeout(() =&gt; setTestStatus(&#39;idle&#39;), 3000);
      }
    } catch {
      setTestStatus(&#39;error&#39;);
      setTimeout(() =&gt; setTestStatus(&#39;idle&#39;), 3000);
    }
  };

  const handleClear = () =&gt; {
    setApiKey(&#39;&#39;);
    localStorage.removeItem(&#39;helius_api_key&#39;);
    setSavedKey(&#39;&#39;);
    window.dispatchEvent(new CustomEvent(&#39;helius-key-updated&#39;, { detail: &#39;&#39; }));
  };

  if (!isOpen) return null;

  return (
    &lt;div className=&quot;fixed inset-0 bg-black/50 backdrop-blur-sm z-50 flex items-center justify-center p-4&quot;&gt;
      &lt;Card className=&quot;w-full max-w-md&quot;&gt;
        &lt;CardHeader&gt;
          &lt;div className=&quot;flex items-center justify-between&quot;&gt;
            &lt;div className=&quot;flex items-center gap-2&quot;&gt;
              &lt;Settings className=&quot;h-5 w-5&quot; /&gt;
              &lt;CardTitle&gt;Settings&lt;/CardTitle&gt;
            &lt;/div&gt;
            &lt;button
              onClick={onClose}
              className=&quot;text-muted-foreground hover:text-foreground&quot;
            &gt;
              ✕
            &lt;/button&gt;
          &lt;/div&gt;
          &lt;CardDescription&gt;
            Configure your Helius API key for analyzing Solana transactions
          &lt;/CardDescription&gt;
        &lt;/CardHeader&gt;

        &lt;CardContent className=&quot;space-y-4&quot;&gt;
          &lt;div className=&quot;space-y-2&quot;&gt;
            &lt;label className=&quot;text-sm font-medium&quot;&gt;Helius API Key&lt;/label&gt;
            &lt;div className=&quot;relative&quot;&gt;
              &lt;Input
                type={showKey ? &#39;text&#39; : &#39;password&#39;}
                placeholder=&quot;Enter your Helius API key...&quot;
                value={apiKey}
                onChange={(e) =&gt; setApiKey(e.target.value)}
                className=&quot;pr-10&quot;
              /&gt;
              &lt;button
                type=&quot;button&quot;
                onClick={() =&gt; setShowKey(!showKey)}
                className=&quot;absolute right-3 top-1/2 -translate-y-1/2 text-muted-foreground hover:text-foreground&quot;
              &gt;
                {showKey ? &lt;EyeOff className=&quot;h-4 w-4&quot; /&gt; : &lt;Eye className=&quot;h-4 w-4&quot; /&gt;}
              &lt;/button&gt;
            &lt;/div&gt;

            {savedKey &amp;&amp; (
              &lt;div className=&quot;flex items-center gap-2 text-sm text-green-600&quot;&gt;
                &lt;CheckCircle2 className=&quot;h-4 w-4&quot; /&gt;
                &lt;span&gt;API key saved locally&lt;/span&gt;
              &lt;/div&gt;
            )}
          &lt;/div&gt;

          &lt;div className=&quot;flex gap-2&quot;&gt;
            &lt;Button
              onClick={handleTest}
              disabled={!apiKey.trim() || testStatus === &#39;testing&#39;}
              variant=&quot;outline&quot;
              className=&quot;flex-1&quot;
            &gt;
              {testStatus === &#39;testing&#39; ? (
                &lt;&gt;
                  &lt;div className=&quot;w-4 h-4 border-2 border-current border-t-transparent rounded-full animate-spin mr-2&quot; /&gt;
                  Testing...
                &lt;/&gt;
              ) : testStatus === &#39;success&#39; ? (
                &lt;&gt;
                  &lt;CheckCircle2 className=&quot;w-4 h-4 mr-2 text-green-500&quot; /&gt;
                  Valid!
                &lt;/&gt;
              ) : testStatus === &#39;error&#39; ? (
                &lt;&gt;
                  &lt;AlertCircle className=&quot;w-4 h-4 mr-2 text-red-500&quot; /&gt;
                  Failed
                &lt;/&gt;
              ) : (
                &#39;Test Key&#39;
              )}
            &lt;/Button&gt;

            &lt;Button onClick={handleSave} disabled={!apiKey.trim()}&gt;
              Save
            &lt;/Button&gt;
          &lt;/div&gt;

          {apiKey &amp;&amp; (
            &lt;Button
              onClick={handleClear}
              variant=&quot;destructive&quot;
              size=&quot;sm&quot;
              className=&quot;w-full&quot;
            &gt;
              Clear Key
            &lt;/Button&gt;
          )}

          &lt;div className=&quot;pt-4 border-t space-y-3&quot;&gt;
            &lt;div className=&quot;flex items-center justify-between&quot;&gt;
              &lt;span className=&quot;text-sm font-medium&quot;&gt;Need a Helius API key?&lt;/span&gt;
              &lt;Badge variant=&quot;secondary&quot;&gt;Free&lt;/Badge&gt;
            &lt;/div&gt;

            &lt;p className=&quot;text-sm text-muted-foreground&quot;&gt;
              Get a free API key from Helius to analyze Solana transactions.
              The free tier includes 100,000 requests per month.
            &lt;/p&gt;

            &lt;Button
              variant=&quot;outline&quot;
              size=&quot;sm&quot;
              className=&quot;w-full&quot;
              onClick={() =&gt; window.open(&#39;https://dashboard.helius.dev/api-keys&#39;, &#39;_blank&#39;)}
            &gt;
              &lt;ExternalLink className=&quot;w-4 h-4 mr-2&quot; /&gt;
              Get Free API Key
            &lt;/Button&gt;
          &lt;/div&gt;
        &lt;/CardContent&gt;
      &lt;/Card&gt;
    &lt;/div&gt;
  );
}

function App() {
  const [contractAddress, setContractAddress] = useState(&#39;&#39;);
  const [period, setPeriod] = useState&lt;&#39;launch&#39; | &#39;recent&#39; | &#39;custom&#39;&gt;(&#39;launch&#39;);
  const [loading, setLoading] = useState(false);
  const [result, setResult] = useState&lt;AnalysisResult | null&gt;(null);
  const [error, setError] = useState(&#39;&#39;);
  const [clipboardStatus, setClipboardStatus] = useState&lt;&#39;idle&#39; | &#39;checking&#39; | &#39;found&#39; | &#39;notfound&#39;&gt;(&#39;idle&#39;);
  const [tokenInfo, setTokenInfo] = useState&lt;TokenInfo | null&gt;(null);
  const [fetchingTokenInfo, setFetchingTokenInfo] = useState(false);
  const [settingsOpen, setSettingsOpen] = useState(false);
  const apiKey = useHeliusApiKey();

  const fetchTokenInfo = async (address: string) =&gt; {
    if (!apiKey) {
      setError(&#39;Please configure your Helius API key in Settings&#39;);
      return;
    }

    setFetchingTokenInfo(true);
    try {
      const response = await fetch(`https://api.helius.xyz/v0/token-metadata?api-key=${apiKey}`, {
        method: &#39;POST&#39;,
        headers: {
          &#39;Content-Type&#39;: &#39;application/json&#39;,
        },
        body: JSON.stringify({
          mintAccounts: [address]
        })
      });

      if (response.ok) {
        const data = await response.json();
        if (data &amp;&amp; data.length &gt; 0) {
          const token = data[0];
          setTokenInfo({
            symbol: token.onChainMetadata?.metadata?.symbol || token.offChainMetadata?.metadata?.symbol || &#39;UNKNOWN&#39;,
            name: token.onChainMetadata?.metadata?.name || token.offChainMetadata?.metadata?.name || &#39;Unknown Token&#39;,
            image: token.offChainMetadata?.metadata?.image || token.onChainMetadata?.metadata?.image,
            decimals: token.onChainMetadata?.mint?.decimals
          });
        } else {
          setTokenInfo({ symbol: &#39;UNKNOWN&#39;, name: &#39;Unknown Token&#39; });
        }
      } else {
        setTokenInfo({ symbol: &#39;UNKNOWN&#39;, name: &#39;Unknown Token&#39; });
      }
    } catch {
      setTokenInfo({ symbol: &#39;UNKNOWN&#39;, name: &#39;Unknown Token&#39; });
    } finally {
      setFetchingTokenInfo(false);
    }
  };

  const handleClipboardPaste = async () =&gt; {
    setClipboardStatus(&#39;checking&#39;);

    try {
      if (!navigator.clipboard || !navigator.clipboard.readText) {
        throw new Error(&#39;Clipboard API not supported&#39;);
      }

      const clipboardText = await navigator.clipboard.readText();
      const solanaAddressRegex = /^[1-9A-HJ-NP-Za-km-z]{32,44}$/;
      const trimmedText = clipboardText.trim();

      if (trimmedText &amp;&amp; solanaAddressRegex.test(trimmedText)) {
        setContractAddress(trimmedText);
        setClipboardStatus(&#39;found&#39;);
        fetchTokenInfo(trimmedText);
        setTimeout(() =&gt; setClipboardStatus(&#39;idle&#39;), 2000);
      } else {
        if (trimmedText.length &gt;= 32 &amp;&amp; trimmedText.length &lt;= 50) {
          setContractAddress(trimmedText);
          setClipboardStatus(&#39;found&#39;);
          fetchTokenInfo(trimmedText);
          setTimeout(() =&gt; setClipboardStatus(&#39;idle&#39;), 2000);
        } else {
          setClipboardStatus(&#39;notfound&#39;);
          setTimeout(() =&gt; setClipboardStatus(&#39;idle&#39;), 2000);
        }
      }
    } catch {
      setClipboardStatus(&#39;notfound&#39;);
      setTimeout(() =&gt; setClipboardStatus(&#39;idle&#39;), 2000);
    }
  };

  const handleAnalyze = async () =&gt; {
    if (!contractAddress.trim()) {
      setError(&#39;Please enter a contract address&#39;);
      return;
    }

    if (!apiKey) {
      setError(&#39;Please configure your Helius API key in Settings&#39;);
      setSettingsOpen(true);
      return;
    }

    if (!tokenInfo &amp;&amp; contractAddress) {
      fetchTokenInfo(contractAddress);
    }

    setLoading(true);
    setError(&#39;&#39;);
    setResult(null);

    try {
      const analysis = await analyzeToken(contractAddress, period, apiKey);
      setResult(analysis);
    } catch (err) {
      setError(err instanceof Error ? err.message : &#39;Analysis failed&#39;);
    } finally {
      setLoading(false);
    }
  };

  const getScoreColor = (score: number) =&gt; {
    if (score &gt;= 80) return &#39;bg-red-500&#39;;
    if (score &gt;= 60) return &#39;bg-orange-500&#39;;
    if (score &gt;= 40) return &#39;bg-yellow-500&#39;;
    return &#39;bg-green-500&#39;;
  };

  const getScoreLabel = (score: number) =&gt; {
    if (score &gt;= 80) return &#39;High Risk&#39;;
    if (score &gt;= 60) return &#39;Medium Risk&#39;;
    if (score &gt;= 40) return &#39;Low Risk&#39;;
    return &#39;Organic&#39;;
  };

  const getMetricExplanation = (metric: string, score: number) =&gt; {
    const explanations = {
      timingCluster: {
        high: &quot;Multiple transactions occurred within seconds of each other, suggesting coordinated buying from a bot or bundler.&quot;,
        medium: &quot;Some clustering of transaction timing detected, but could be natural market activity.&quot;,
        low: &quot;Transaction timing appears natural and distributed over time.&quot;
      },
      walletSimilarity: {
        high: &quot;Wallets show very similar behavior patterns (transaction counts, timing), indicating possible coordination.&quot;,
        medium: &quot;Some wallets have similar patterns, but this could be coincidental.&quot;,
        low: &quot;Wallet behaviors appear diverse and independent.&quot;
      },
      sizePatterns: {
        high: &quot;Many transactions have suspiciously similar amounts, suggesting automated buying with preset values.&quot;,
        medium: &quot;Some transaction amounts are similar, but within normal variation range.&quot;,
        low: &quot;Transaction amounts show natural variation typical of organic buying.&quot;
      },
      distribution: {
        high: &quot;Token holdings are highly concentrated among a few wallets, indicating possible accumulation strategy.&quot;,
        medium: &quot;Moderate concentration of holdings, some large buyers present.&quot;,
        low: &quot;Token distribution appears relatively balanced across many holders.&quot;
      }
    };

    const level = score &gt;= 70 ? &#39;high&#39; : score &gt;= 40 ? &#39;medium&#39; : &#39;low&#39;;
    return explanations[metric as keyof typeof explanations][level];
  };

  const getMetricIcon = (metric: string) =&gt; {
    const icons = {
      timingCluster: TrendingUp,
      walletSimilarity: Users,
      sizePatterns: DollarSign,
      distribution: BarChart3
    };
    return icons[metric as keyof typeof icons] || Info;
  };

  const getActionableInsights = (result: AnalysisResult) =&gt; {
    const insights = [];

    if (result.metrics.timingCluster &gt; 70) {
      insights.push(&quot;⚠️ High coordination detected - consider checking if this is a legitimate project launch or potential manipulation&quot;);
    }

    if (result.metrics.walletSimilarity &gt; 60) {
      insights.push(&quot;👥 Similar wallet patterns found - investigate if these wallets are controlled by the same entity&quot;);
    }

    if (result.metrics.sizePatterns &gt; 60) {
      insights.push(&quot;💰 Automated buying patterns detected - typical of bots or bundled transactions&quot;);
    }

    if (result.metrics.distribution &gt; 70) {
      insights.push(&quot;📊 High concentration risk - few wallets hold most tokens, creating potential dump risk&quot;);
    }

    if (result.score &lt; 30) {
      insights.push(&quot;✅ Token appears to have organic trading patterns with low bundling risk&quot;);
    }

    return insights;
  };

  return (
    &lt;div className=&quot;min-h-screen bg-background p-8&quot;&gt;
      &lt;div className=&quot;mx-auto max-w-4xl space-y-8&quot;&gt;
        &lt;div className=&quot;text-center relative&quot;&gt;
          &lt;h1 className=&quot;text-4xl font-bold&quot;&gt;Solana Bundler Detective&lt;/h1&gt;
          &lt;p className=&quot;text-muted-foreground mt-2&quot;&gt;
            Analyze token transactions for coordinated buying patterns
          &lt;/p&gt;

          &lt;div className=&quot;absolute top-0 right-0 flex items-center gap-3&quot;&gt;
            &lt;button
              onClick={() =&gt; setSettingsOpen(true)}
              className=&quot;flex items-center gap-2 px-3 py-1.5 bg-gray-700 hover:bg-gray-600 text-white rounded-lg text-sm font-medium transition-all duration-200&quot;
            &gt;
              &lt;Settings className=&quot;w-3 h-3&quot; /&gt;
              &lt;span&gt;Settings&lt;/span&gt;
              {!apiKey &amp;&amp; &lt;div className=&quot;w-2 h-2 bg-red-500 rounded-full&quot; /&gt;}
            &lt;/button&gt;

            {tokenInfo &amp;&amp; (
              &lt;div className=&quot;flex items-center gap-2 px-3 py-1.5 bg-gray-800/90 text-white rounded-lg text-sm&quot;&gt;
                {tokenInfo.image &amp;&amp; (
                  &lt;img
                    src={tokenInfo.image}
                    alt={tokenInfo.symbol}
                    className=&quot;w-5 h-5 rounded-full object-cover&quot;
                    onError={(e) =&gt; {
                      (e.target as HTMLImageElement).style.display = &#39;none&#39;;
                    }}
                  /&gt;
                )}
                &lt;div className=&quot;flex items-center gap-1&quot;&gt;
                  &lt;span className=&quot;font-bold text-yellow-400&quot;&gt;${tokenInfo.symbol}&lt;/span&gt;
                  {fetchingTokenInfo &amp;&amp; (
                    &lt;div className=&quot;w-3 h-3 border border-white border-t-transparent rounded-full animate-spin ml-1&quot; /&gt;
                  )}
                &lt;/div&gt;
              &lt;/div&gt;
            )}

            &lt;button
              onClick={handleClipboardPaste}
              disabled={clipboardStatus === &#39;checking&#39;}
              className=&quot;flex items-center gap-2 px-3 py-1.5 bg-gradient-to-r from-purple-600 to-blue-600 hover:from-purple-700 hover:to-blue-700 disabled:from-gray-500 disabled:to-gray-600 text-white rounded-lg text-sm font-medium transition-all duration-200 shadow-lg hover:shadow-xl&quot;
            &gt;
              {clipboardStatus === &#39;checking&#39; ? (
                &lt;&gt;
                  &lt;div className=&quot;w-3 h-3 border-2 border-white border-t-transparent rounded-full animate-spin&quot; /&gt;
                  &lt;span&gt;Reading...&lt;/span&gt;
                &lt;/&gt;
              ) : clipboardStatus === &#39;found&#39; ? (
                &lt;&gt;
                  &lt;CheckCircle2 className=&quot;w-3 h-3&quot; /&gt;
                  &lt;span&gt;Pasted!&lt;/span&gt;
                &lt;/&gt;
              ) : clipboardStatus === &#39;notfound&#39; ? (
                &lt;&gt;
                  &lt;AlertCircle className=&quot;w-3 h-3&quot; /&gt;
                  &lt;span&gt;No address&lt;/span&gt;
                &lt;/&gt;
              ) : (
                &lt;&gt;
                  &lt;Clipboard className=&quot;w-3 h-3&quot; /&gt;
                  &lt;span&gt;Paste&lt;/span&gt;
                &lt;/&gt;
              )}
            &lt;/button&gt;
          &lt;/div&gt;
        &lt;/div&gt;

        &lt;Card&gt;
          &lt;CardHeader&gt;
            &lt;CardTitle&gt;Token Analysis&lt;/CardTitle&gt;
            &lt;CardDescription&gt;
              Enter a Solana token contract address to analyze for bundled transactions
            &lt;/CardDescription&gt;
          &lt;/CardHeader&gt;
          &lt;CardContent className=&quot;space-y-4&quot;&gt;
            &lt;div className=&quot;flex gap-4&quot;&gt;
              &lt;Input
                placeholder=&quot;Token contract address...&quot;
                value={contractAddress}
                onChange={(e) =&gt; setContractAddress(e.target.value)}
                className=&quot;flex-1&quot;
              /&gt;
              &lt;select
                value={period}
                onChange={(e) =&gt; setPeriod(e.target.value as &#39;launch&#39; | &#39;recent&#39; | &#39;custom&#39;)}
                className=&quot;px-3 py-2 border rounded-md&quot;
              &gt;
                &lt;option value=&quot;launch&quot;&gt;Launch Period&lt;/option&gt;
                &lt;option value=&quot;recent&quot;&gt;Recent (7 days)&lt;/option&gt;
              &lt;/select&gt;
            &lt;/div&gt;

            &lt;Button
              onClick={handleAnalyze}
              disabled={loading}
              className=&quot;w-full&quot;
            &gt;
              {loading ? &#39;Analyzing...&#39; : &#39;Analyze Token&#39;}
            &lt;/Button&gt;

            {error &amp;&amp; (
              &lt;div className=&quot;text-red-500 text-sm&quot;&gt;{error}&lt;/div&gt;
            )}
          &lt;/CardContent&gt;
        &lt;/Card&gt;

        {loading &amp;&amp; (
          &lt;Card&gt;
            &lt;CardContent className=&quot;pt-6&quot;&gt;
              &lt;div className=&quot;space-y-2&quot;&gt;
                &lt;div className=&quot;flex justify-between text-sm&quot;&gt;
                  &lt;span&gt;Analyzing transactions...&lt;/span&gt;
                  &lt;span&gt;Processing&lt;/span&gt;
                &lt;/div&gt;
                &lt;Progress value={65} className=&quot;w-full&quot; /&gt;
              &lt;/div&gt;
            &lt;/CardContent&gt;
          &lt;/Card&gt;
        )}

        {result &amp;&amp; (
          &lt;div className=&quot;space-y-6&quot;&gt;
            &lt;Card&gt;
              &lt;CardHeader&gt;
                &lt;CardTitle className=&quot;flex items-center justify-between&quot;&gt;
                  &lt;span&gt;Analysis Results&lt;/span&gt;
                  &lt;Badge variant=&quot;secondary&quot; className={getScoreColor(result.score)}&gt;
                    {getScoreLabel(result.score)} ({result.score}/100)
                  &lt;/Badge&gt;
                &lt;/CardTitle&gt;
              &lt;/CardHeader&gt;
              &lt;CardContent&gt;
                &lt;div className=&quot;space-y-4&quot;&gt;
                  &lt;div&gt;
                    &lt;div className=&quot;flex justify-between text-sm mb-2&quot;&gt;
                      &lt;span&gt;Bundling Risk Score&lt;/span&gt;
                      &lt;span&gt;{result.score}/100&lt;/span&gt;
                    &lt;/div&gt;
                    &lt;Progress value={result.score} className=&quot;w-full&quot; /&gt;
                  &lt;/div&gt;

                  &lt;div className=&quot;grid grid-cols-2 md:grid-cols-4 gap-4 pt-4&quot;&gt;
                    &lt;div className=&quot;text-center&quot;&gt;
                      &lt;div className=&quot;text-2xl font-bold&quot;&gt;{result.details.totalTransactions}&lt;/div&gt;
                      &lt;div className=&quot;text-sm text-muted-foreground&quot;&gt;Total Transactions&lt;/div&gt;
                    &lt;/div&gt;
                    &lt;div className=&quot;text-center&quot;&gt;
                      &lt;div className=&quot;text-2xl font-bold&quot;&gt;{result.details.uniqueWallets}&lt;/div&gt;
                      &lt;div className=&quot;text-sm text-muted-foreground&quot;&gt;Unique Wallets&lt;/div&gt;
                    &lt;/div&gt;
                    &lt;div className=&quot;text-center&quot;&gt;
                      &lt;div className=&quot;text-2xl font-bold&quot;&gt;{result.details.suspiciousWallets}&lt;/div&gt;
                      &lt;div className=&quot;text-sm text-muted-foreground&quot;&gt;Suspicious Wallets&lt;/div&gt;
                    &lt;/div&gt;
                    &lt;div className=&quot;text-center&quot;&gt;
                      &lt;div className=&quot;text-2xl font-bold&quot;&gt;{result.details.analysisPeriod}&lt;/div&gt;
                      &lt;div className=&quot;text-sm text-muted-foreground&quot;&gt;Period Analyzed&lt;/div&gt;
                    &lt;/div&gt;
                  &lt;/div&gt;
                &lt;/div&gt;
              &lt;/CardContent&gt;
            &lt;/Card&gt;

            &lt;Card&gt;
              &lt;CardHeader&gt;
                &lt;CardTitle className=&quot;flex items-center gap-2&quot;&gt;
                  &lt;BarChart3 className=&quot;h-5 w-5&quot; /&gt;
                  Detailed Metrics
                &lt;/CardTitle&gt;
                &lt;CardDescription&gt;
                  Each metric analyzes different aspects of potential coordination
                &lt;/CardDescription&gt;
              &lt;/CardHeader&gt;
              &lt;CardContent&gt;
                &lt;div className=&quot;space-y-6&quot;&gt;
                  {Object.entries({
                    &#39;Timing Cluster Score&#39;: {
                      value: result.metrics.timingCluster,
                      key: &#39;timingCluster&#39;,
                      description: &#39;Detects if multiple transactions happened within suspicious time windows&#39;
                    },
                    &#39;Wallet Similarity&#39;: {
                      value: result.metrics.walletSimilarity,
                      key: &#39;walletSimilarity&#39;,
                      description: &#39;Analyzes if wallets show similar behavioral patterns&#39;
                    },
                    &#39;Size Patterns&#39;: {
                      value: result.metrics.sizePatterns,
                      key: &#39;sizePatterns&#39;,
                      description: &#39;Checks for suspiciously similar transaction amounts&#39;
                    },
                    &#39;Distribution Score&#39;: {
                      value: result.metrics.distribution,
                      key: &#39;distribution&#39;,
                      description: &#39;Measures how concentrated token holdings are&#39;
                    }
                  }).map(([label, data]) =&gt; {
                    const IconComponent = getMetricIcon(data.key);
                    return (
                      &lt;div key={label} className=&quot;space-y-3&quot;&gt;
                        &lt;div className=&quot;flex items-center justify-between&quot;&gt;
                          &lt;div className=&quot;flex items-center gap-2&quot;&gt;
                            &lt;IconComponent className=&quot;h-4 w-4 text-muted-foreground&quot; /&gt;
                            &lt;span className=&quot;font-medium&quot;&gt;{label}&lt;/span&gt;
                          &lt;/div&gt;
                          &lt;span className=&quot;text-sm font-mono&quot;&gt;{data.value}/100&lt;/span&gt;
                        &lt;/div&gt;
                        &lt;Progress value={data.value} className=&quot;w-full&quot; /&gt;
                        &lt;div className=&quot;text-sm text-muted-foreground&quot;&gt;
                          &lt;p className=&quot;mb-1&quot;&gt;{data.description}&lt;/p&gt;
                          &lt;p className=&quot;text-xs&quot;&gt;{getMetricExplanation(data.key, data.value)}&lt;/p&gt;
                        &lt;/div&gt;
                      &lt;/div&gt;
                    );
                  })}
                &lt;/div&gt;
              &lt;/CardContent&gt;
            &lt;/Card&gt;

            &lt;Card&gt;
              &lt;CardHeader&gt;
                &lt;CardTitle className=&quot;flex items-center gap-2&quot;&gt;
                  &lt;AlertCircle className=&quot;h-5 w-5&quot; /&gt;
                  Key Insights &amp; Recommendations
                &lt;/CardTitle&gt;
              &lt;/CardHeader&gt;
              &lt;CardContent&gt;
                &lt;div className=&quot;space-y-3&quot;&gt;
                  {getActionableInsights(result).map((insight, index) =&gt; (
                    &lt;div key={index} className=&quot;flex items-start gap-3 p-3 bg-muted/50 rounded-lg&quot;&gt;
                      &lt;Info className=&quot;h-4 w-4 text-blue-500 mt-0.5 flex-shrink-0&quot; /&gt;
                      &lt;p className=&quot;text-sm&quot;&gt;{insight}&lt;/p&gt;
                    &lt;/div&gt;
                  ))}
                &lt;/div&gt;
              &lt;/CardContent&gt;
            &lt;/Card&gt;
          &lt;/div&gt;
        )}
      &lt;/div&gt;

      &lt;SettingsModal
        isOpen={settingsOpen}
        onClose={() =&gt; setSettingsOpen(false)}
      /&gt;
    &lt;/div&gt;
  );
}

export default App;
</content>
    </document>

    <document>
      <source>src/App.css</source>
      <tags></tags>
      <metadata>
        <size>606</size>
        <lastModified>2025-05-26T02:28:07.075Z</lastModified>
        <extension>css</extension>
        <directory>src</directory>
      </metadata>
      <content>#root {
  max-width: 1280px;
  margin: 0 auto;
  padding: 2rem;
  text-align: center;
}

.logo {
  height: 6em;
  padding: 1.5em;
  will-change: filter;
  transition: filter 300ms;
}
.logo:hover {
  filter: drop-shadow(0 0 2em #646cffaa);
}
.logo.react:hover {
  filter: drop-shadow(0 0 2em #61dafbaa);
}

@keyframes logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@media (prefers-reduced-motion: no-preference) {
  a:nth-of-type(2) .logo {
    animation: logo-spin infinite 20s linear;
  }
}

.card {
  padding: 2em;
}

.read-the-docs {
  color: #888;
}
</content>
    </document>

    <document>
      <source>src/index.css</source>
      <tags></tags>
      <metadata>
        <size>4090</size>
        <lastModified>2025-05-26T02:31:11.428Z</lastModified>
        <extension>css</extension>
        <directory>src</directory>
      </metadata>
      <content>@import &quot;tailwindcss&quot;;
@import &quot;tw-animate-css&quot;;

@custom-variant dark (&amp;:is(.dark *));

@theme inline {
  --radius-sm: calc(var(--radius) - 4px);
  --radius-md: calc(var(--radius) - 2px);
  --radius-lg: var(--radius);
  --radius-xl: calc(var(--radius) + 4px);
  --color-background: var(--background);
  --color-foreground: var(--foreground);
  --color-card: var(--card);
  --color-card-foreground: var(--card-foreground);
  --color-popover: var(--popover);
  --color-popover-foreground: var(--popover-foreground);
  --color-primary: var(--primary);
  --color-primary-foreground: var(--primary-foreground);
  --color-secondary: var(--secondary);
  --color-secondary-foreground: var(--secondary-foreground);
  --color-muted: var(--muted);
  --color-muted-foreground: var(--muted-foreground);
  --color-accent: var(--accent);
  --color-accent-foreground: var(--accent-foreground);
  --color-destructive: var(--destructive);
  --color-border: var(--border);
  --color-input: var(--input);
  --color-ring: var(--ring);
  --color-chart-1: var(--chart-1);
  --color-chart-2: var(--chart-2);
  --color-chart-3: var(--chart-3);
  --color-chart-4: var(--chart-4);
  --color-chart-5: var(--chart-5);
  --color-sidebar: var(--sidebar);
  --color-sidebar-foreground: var(--sidebar-foreground);
  --color-sidebar-primary: var(--sidebar-primary);
  --color-sidebar-primary-foreground: var(--sidebar-primary-foreground);
  --color-sidebar-accent: var(--sidebar-accent);
  --color-sidebar-accent-foreground: var(--sidebar-accent-foreground);
  --color-sidebar-border: var(--sidebar-border);
  --color-sidebar-ring: var(--sidebar-ring);
}

:root {
  --radius: 0.625rem;
  --background: oklch(1 0 0);
  --foreground: oklch(0.145 0 0);
  --card: oklch(1 0 0);
  --card-foreground: oklch(0.145 0 0);
  --popover: oklch(1 0 0);
  --popover-foreground: oklch(0.145 0 0);
  --primary: oklch(0.205 0 0);
  --primary-foreground: oklch(0.985 0 0);
  --secondary: oklch(0.97 0 0);
  --secondary-foreground: oklch(0.205 0 0);
  --muted: oklch(0.97 0 0);
  --muted-foreground: oklch(0.556 0 0);
  --accent: oklch(0.97 0 0);
  --accent-foreground: oklch(0.205 0 0);
  --destructive: oklch(0.577 0.245 27.325);
  --border: oklch(0.922 0 0);
  --input: oklch(0.922 0 0);
  --ring: oklch(0.708 0 0);
  --chart-1: oklch(0.646 0.222 41.116);
  --chart-2: oklch(0.6 0.118 184.704);
  --chart-3: oklch(0.398 0.07 227.392);
  --chart-4: oklch(0.828 0.189 84.429);
  --chart-5: oklch(0.769 0.188 70.08);
  --sidebar: oklch(0.985 0 0);
  --sidebar-foreground: oklch(0.145 0 0);
  --sidebar-primary: oklch(0.205 0 0);
  --sidebar-primary-foreground: oklch(0.985 0 0);
  --sidebar-accent: oklch(0.97 0 0);
  --sidebar-accent-foreground: oklch(0.205 0 0);
  --sidebar-border: oklch(0.922 0 0);
  --sidebar-ring: oklch(0.708 0 0);
}

.dark {
  --background: oklch(0.145 0 0);
  --foreground: oklch(0.985 0 0);
  --card: oklch(0.205 0 0);
  --card-foreground: oklch(0.985 0 0);
  --popover: oklch(0.205 0 0);
  --popover-foreground: oklch(0.985 0 0);
  --primary: oklch(0.922 0 0);
  --primary-foreground: oklch(0.205 0 0);
  --secondary: oklch(0.269 0 0);
  --secondary-foreground: oklch(0.985 0 0);
  --muted: oklch(0.269 0 0);
  --muted-foreground: oklch(0.708 0 0);
  --accent: oklch(0.269 0 0);
  --accent-foreground: oklch(0.985 0 0);
  --destructive: oklch(0.704 0.191 22.216);
  --border: oklch(1 0 0 / 10%);
  --input: oklch(1 0 0 / 15%);
  --ring: oklch(0.556 0 0);
  --chart-1: oklch(0.488 0.243 264.376);
  --chart-2: oklch(0.696 0.17 162.48);
  --chart-3: oklch(0.769 0.188 70.08);
  --chart-4: oklch(0.627 0.265 303.9);
  --chart-5: oklch(0.645 0.246 16.439);
  --sidebar: oklch(0.205 0 0);
  --sidebar-foreground: oklch(0.985 0 0);
  --sidebar-primary: oklch(0.488 0.243 264.376);
  --sidebar-primary-foreground: oklch(0.985 0 0);
  --sidebar-accent: oklch(0.269 0 0);
  --sidebar-accent-foreground: oklch(0.985 0 0);
  --sidebar-border: oklch(1 0 0 / 10%);
  --sidebar-ring: oklch(0.556 0 0);
}

@layer base {
  * {
    @apply border-border outline-ring/50;
  }
  body {
    @apply bg-background text-foreground;
  }
}
</content>
    </document>

    <document>
      <source>src/vite-env.d.ts</source>
      <tags></tags>
      <metadata>
        <size>38</size>
        <lastModified>2025-05-26T02:28:07.078Z</lastModified>
        <extension>ts</extension>
        <directory>src</directory>
      </metadata>
      <content>/// &lt;reference types=&quot;vite/client&quot; /&gt;
</content>
    </document>

    <document>
      <source>tsconfig.app.json</source>
      <tags></tags>
      <metadata>
        <size>755</size>
        <lastModified>2025-05-26T04:01:24.998Z</lastModified>
        <extension>json</extension>
        <directory>Root</directory>
      </metadata>
      <content>{
  &quot;compilerOptions&quot;: {
      &quot;baseUrl&quot;: &quot;.&quot;,
    &quot;paths&quot;: {
      &quot;@/*&quot;: [
        &quot;./src/*&quot;
      ]
    },
    &quot;tsBuildInfoFile&quot;: &quot;./node_modules/.tmp/tsconfig.app.tsbuildinfo&quot;,
    &quot;target&quot;: &quot;ES2020&quot;,
    &quot;useDefineForClassFields&quot;: true,
    &quot;lib&quot;: [&quot;ES2020&quot;, &quot;DOM&quot;, &quot;DOM.Iterable&quot;],
    &quot;module&quot;: &quot;ESNext&quot;,
    &quot;skipLibCheck&quot;: true,

    /* Bundler mode */
    &quot;moduleResolution&quot;: &quot;bundler&quot;,
    &quot;allowImportingTsExtensions&quot;: true,
    &quot;verbatimModuleSyntax&quot;: true,
    &quot;moduleDetection&quot;: &quot;force&quot;,
    &quot;noEmit&quot;: true,
    &quot;jsx&quot;: &quot;react-jsx&quot;,

    /* Linting */
    &quot;strict&quot;: true,
    &quot;noUnusedLocals&quot;: true,
    &quot;noUnusedParameters&quot;: true,
    &quot;noFallthroughCasesInSwitch&quot;: true,
    &quot;noUncheckedSideEffectImports&quot;: true
  },
  &quot;include&quot;: [&quot;src&quot;]
}
</content>
    </document>

    <document>
      <source>.gitignore</source>
      <tags></tags>
      <metadata>
        <size>253</size>
        <lastModified>2025-05-26T02:28:07.073Z</lastModified>
        <extension>gitignore</extension>
        <directory>Root</directory>
      </metadata>
      <content># Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?
</content>
    </document>

    <document>
      <source>index.html</source>
      <tags></tags>
      <metadata>
        <size>366</size>
        <lastModified>2025-05-26T02:28:07.074Z</lastModified>
        <extension>html</extension>
        <directory>Root</directory>
      </metadata>
      <content>&lt;!doctype html&gt;
&lt;html lang=&quot;en&quot;&gt;
  &lt;head&gt;
    &lt;meta charset=&quot;UTF-8&quot; /&gt;
    &lt;link rel=&quot;icon&quot; type=&quot;image/svg+xml&quot; href=&quot;/vite.svg&quot; /&gt;
    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;
    &lt;title&gt;Vite + React + TS&lt;/title&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;div id=&quot;root&quot;&gt;&lt;/div&gt;
    &lt;script type=&quot;module&quot; src=&quot;/src/main.tsx&quot;&gt;&lt;/script&gt;
  &lt;/body&gt;
&lt;/html&gt;
</content>
    </document>

    <document>
      <source>README.md</source>
      <tags></tags>
      <metadata>
        <size>5</size>
        <lastModified>2025-05-26T02:36:50.222Z</lastModified>
        <extension>md</extension>
        <directory>Root</directory>
      </metadata>
      <content>todo
</content>
    </document>

    <document>
      <source>tsconfig.node.json</source>
      <tags></tags>
      <metadata>
        <size>598</size>
        <lastModified>2025-05-26T04:01:31.630Z</lastModified>
        <extension>json</extension>
        <directory>Root</directory>
      </metadata>
      <content>{
  &quot;compilerOptions&quot;: {
    &quot;tsBuildInfoFile&quot;: &quot;./node_modules/.tmp/tsconfig.node.tsbuildinfo&quot;,
    &quot;target&quot;: &quot;ES2022&quot;,
    &quot;lib&quot;: [&quot;ES2023&quot;],
    &quot;module&quot;: &quot;ESNext&quot;,
    &quot;skipLibCheck&quot;: true,

    /* Bundler mode */
    &quot;moduleResolution&quot;: &quot;bundler&quot;,
    &quot;allowImportingTsExtensions&quot;: true,
    &quot;verbatimModuleSyntax&quot;: true,
    &quot;moduleDetection&quot;: &quot;force&quot;,
    &quot;noEmit&quot;: true,

    /* Linting */
    &quot;strict&quot;: true,
    &quot;noUnusedLocals&quot;: true,
    &quot;noUnusedParameters&quot;: true,
    &quot;noFallthroughCasesInSwitch&quot;: true,
    &quot;noUncheckedSideEffectImports&quot;: true
  },
  &quot;include&quot;: [&quot;vite.config.ts&quot;]
}
</content>
    </document>

    <document>
      <source>package.json</source>
      <tags></tags>
      <metadata>
        <size>1029</size>
        <lastModified>2025-05-26T02:35:20.204Z</lastModified>
        <extension>json</extension>
        <directory>Root</directory>
      </metadata>
      <content>{
  &quot;name&quot;: &quot;solana-bundler-detector&quot;,
  &quot;private&quot;: true,
  &quot;version&quot;: &quot;0.0.0&quot;,
  &quot;type&quot;: &quot;module&quot;,
  &quot;scripts&quot;: {
    &quot;dev&quot;: &quot;vite&quot;,
    &quot;build&quot;: &quot;tsc -b &amp;&amp; vite build&quot;,
    &quot;lint&quot;: &quot;eslint .&quot;,
    &quot;preview&quot;: &quot;vite preview&quot;
  },
  &quot;dependencies&quot;: {
    &quot;@radix-ui/react-progress&quot;: &quot;^1.1.7&quot;,
    &quot;@radix-ui/react-slot&quot;: &quot;^1.2.3&quot;,
    &quot;@tailwindcss/vite&quot;: &quot;^4.1.7&quot;,
    &quot;class-variance-authority&quot;: &quot;^0.7.1&quot;,
    &quot;clsx&quot;: &quot;^2.1.1&quot;,
    &quot;lucide-react&quot;: &quot;^0.511.0&quot;,
    &quot;react&quot;: &quot;^19.1.0&quot;,
    &quot;react-dom&quot;: &quot;^19.1.0&quot;,
    &quot;tailwind-merge&quot;: &quot;^3.3.0&quot;,
    &quot;tailwindcss&quot;: &quot;^4.1.7&quot;
  },
  &quot;devDependencies&quot;: {
    &quot;@eslint/js&quot;: &quot;^9.25.0&quot;,
    &quot;@types/node&quot;: &quot;^22.15.21&quot;,
    &quot;@types/react&quot;: &quot;^19.1.2&quot;,
    &quot;@types/react-dom&quot;: &quot;^19.1.2&quot;,
    &quot;@vitejs/plugin-react&quot;: &quot;^4.4.1&quot;,
    &quot;eslint&quot;: &quot;^9.25.0&quot;,
    &quot;eslint-plugin-react-hooks&quot;: &quot;^5.2.0&quot;,
    &quot;eslint-plugin-react-refresh&quot;: &quot;^0.4.19&quot;,
    &quot;globals&quot;: &quot;^16.0.0&quot;,
    &quot;tw-animate-css&quot;: &quot;^1.3.0&quot;,
    &quot;typescript&quot;: &quot;~5.8.3&quot;,
    &quot;typescript-eslint&quot;: &quot;^8.30.1&quot;,
    &quot;vite&quot;: &quot;^6.3.5&quot;
  }
}
</content>
    </document>

    <document>
      <source>.env</source>
      <tags></tags>
      <metadata>
        <size>106</size>
        <lastModified>2025-05-26T02:35:11.757Z</lastModified>
        <extension>env</extension>
        <directory>Root</directory>
      </metadata>
      <content># Copy to .env.local and add your Helius API key
VITE_HELIUS_API_KEY=8cc07016-410c-42aa-9220-a8a67cdbb6f7
</content>
    </document>

    <document>
      <source>tsconfig.json</source>
      <tags></tags>
      <metadata>
        <size>233</size>
        <lastModified>2025-05-26T02:29:04.749Z</lastModified>
        <extension>json</extension>
        <directory>Root</directory>
      </metadata>
      <content>{
  &quot;files&quot;: [],
  &quot;references&quot;: [
    {
      &quot;path&quot;: &quot;./tsconfig.app.json&quot;
    },
    {
      &quot;path&quot;: &quot;./tsconfig.node.json&quot;
    }
  ],
  &quot;compilerOptions&quot;: {
    &quot;baseUrl&quot;: &quot;.&quot;,
    &quot;paths&quot;: {
      &quot;@/*&quot;: [&quot;./src/*&quot;]
    }
  }
}
</content>
    </document>

    <document>
      <source>vite.config.ts</source>
      <tags></tags>
      <metadata>
        <size>327</size>
        <lastModified>2025-05-26T02:30:07.907Z</lastModified>
        <extension>ts</extension>
        <directory>Root</directory>
      </metadata>
      <content>import path from &#39;path&#39;
import tailwindcss from &#39;@tailwindcss/vite&#39;
import react from &#39;@vitejs/plugin-react&#39;
import { defineConfig } from &#39;vite&#39;

// https://vite.dev/config/
export default defineConfig({
  plugins: [react(), tailwindcss()],
  resolve: {
    alias: {
      &#39;@&#39;: path.resolve(__dirname, &#39;./src&#39;),
    },
  },
})
</content>
    </document>

    <document>
      <source>components.json</source>
      <tags></tags>
      <metadata>
        <size>425</size>
        <lastModified>2025-05-26T02:31:10.888Z</lastModified>
        <extension>json</extension>
        <directory>Root</directory>
      </metadata>
      <content>{
  &quot;$schema&quot;: &quot;https://ui.shadcn.com/schema.json&quot;,
  &quot;style&quot;: &quot;new-york&quot;,
  &quot;rsc&quot;: false,
  &quot;tsx&quot;: true,
  &quot;tailwind&quot;: {
    &quot;config&quot;: &quot;&quot;,
    &quot;css&quot;: &quot;src/index.css&quot;,
    &quot;baseColor&quot;: &quot;neutral&quot;,
    &quot;cssVariables&quot;: true,
    &quot;prefix&quot;: &quot;&quot;
  },
  &quot;aliases&quot;: {
    &quot;components&quot;: &quot;@/components&quot;,
    &quot;utils&quot;: &quot;@/lib/utils&quot;,
    &quot;ui&quot;: &quot;@/components/ui&quot;,
    &quot;lib&quot;: &quot;@/lib&quot;,
    &quot;hooks&quot;: &quot;@/hooks&quot;
  },
  &quot;iconLibrary&quot;: &quot;lucide&quot;
}</content>
    </document>

    <document>
      <source>eslint.config.js</source>
      <tags></tags>
      <metadata>
        <size>734</size>
        <lastModified>2025-05-26T02:28:07.073Z</lastModified>
        <extension>js</extension>
        <directory>Root</directory>
      </metadata>
      <content>import js from &#39;@eslint/js&#39;
import globals from &#39;globals&#39;
import reactHooks from &#39;eslint-plugin-react-hooks&#39;
import reactRefresh from &#39;eslint-plugin-react-refresh&#39;
import tseslint from &#39;typescript-eslint&#39;

export default tseslint.config(
  { ignores: [&#39;dist&#39;] },
  {
    extends: [js.configs.recommended, ...tseslint.configs.recommended],
    files: [&#39;**/*.{ts,tsx}&#39;],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
    },
    plugins: {
      &#39;react-hooks&#39;: reactHooks,
      &#39;react-refresh&#39;: reactRefresh,
    },
    rules: {
      ...reactHooks.configs.recommended.rules,
      &#39;react-refresh/only-export-components&#39;: [
        &#39;warn&#39;,
        { allowConstantExport: true },
      ],
    },
  },
)
</content>
    </document>
    
  </documents>

</bundle>